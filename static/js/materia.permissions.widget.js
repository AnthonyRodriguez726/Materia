// Generated by CoffeeScript 1.6.3
(function() {
  Namespace('Materia.Permissions').Widget = (function() {
    var buildPermsList, init, saveAndClose;
    init = function(gateway) {};
    buildPermsList = function() {
      var access_list, expiration_bridge, found, id, popup_data, selectedGame, user_ids;
      expiration_bridge = [];
      $('#popup .access_list div.user_perm').each(function() {
        var existing_user_id;
        existing_user_id = parseInt($(this).data('user-id'));
        return expiration_bridge[existing_user_id] = $(this).data('expirationDate');
      });
      $('#popup .access_list').empty();
      selectedGame = $('.gameSelected').attr('id').split('_')[1];
      popup_data = $('#popup.share').data();
      access_list = {};
      user_ids = [];
      found = -1;
      id = -1;
      return Materia.User.getCurrentUser(function(current_user) {
        return Materia.Coms.Json.send('permissions_get', [0, selectedGame], function(permInfo) {
          var accessLevel, i, perms, user_id;
          perms = permInfo['widget_user_perms'];
          accessLevel = Number(permInfo['user_perms'][current_user.id][0]);
          if (accessLevel === 0) {
            $("#popup.share .access_list").addClass('no-add-access');
            $("#popup.share .cancel_button").html('Close');
            $("#popup.share .input_label").remove();
            $("#popup.share .user_add").remove();
          }
          if (typeof popup_data.usersToAdd === 'undefined') {
            popup_data.current_user_access = accessLevel;
            popup_data.usersToAdd = [];
            popup_data.usersToRemove = [];
          }
          for (id in popup_data.usersToRemove) {
            if ((found = $.inArray(popup_data.usersToRemove[id], popup_data.usersToAdd)) !== -1) {
              popup_data.usersToRemove.splice(id, 1);
              popup_data.usersToAdd.splice(found, 1);
            }
          }
          for (user_id in perms) {
            if ($.inArray(user_id, popup_data.usersToRemove) !== -1) {
              continue;
            }
            access_list[user_id] = perms[user_id];
            user_ids.push(user_id);
          }
          for (i in popup_data.usersToAdd) {
            id = popup_data.usersToAdd[i];
            access_list[id] = [0, null];
            user_ids.push(id);
          }
          if (user_ids.length === 0) {
            return;
          }
          return Materia.Coms.Json.send('user_get', [user_ids], function(users) {
            var $perm_temp, collaborator, collaboratorAccess, collaboratorExpirationTimestamp, onlyUser;
            users.sort(function(a, b) {
              if (a.first < b.first || (a.first === b.first && a.last < b.last) || (a.last === b.last && a.middle < b.middle)) {
                return -1;
              }
              return 1;
            });
            $('body').append("<div id='permdump'></div>");
            $perm_temp = $("#permdump");
            $perm_temp.addClass("user_perm");
            $perm_temp.append($('#t-share-person').html());
            onlyUser = users.length === 1;
            for (i in users) {
              collaborator = users[i];
              collaboratorAccess = parseInt(access_list[collaborator.id][0], 10);
              collaboratorExpirationTimestamp = expiration_bridge[collaborator.id] != null ? expiration_bridge[collaborator.id] : access_list[collaborator.id][1];
              Materia.Permissions.User.createCollaboratorRow(collaborator, collaboratorAccess, accessLevel, collaboratorExpirationTimestamp);
            }
            $perm_temp.remove();
            return $("#popup").tablock("reset");
          });
        });
      });
    };
    saveAndClose = function() {
      Materia.Set.Throbber.startSpin('#popup');
      return Materia.User.getCurrentUser(function(current_user) {
        var allUserPerms, collaboration_count, delete_self, inst_id, popup_data, str, user, usersToAdd, usersToRemove, _i, _len;
        inst_id = $('.gameSelected').attr('id').split("_")[1];
        allUserPerms = [];
        collaboration_count = 0;
        popup_data = $('#popup.share').data();
        usersToRemove = popup_data.usersToRemove;
        usersToAdd = popup_data.usersToAdd;
        delete_self = $.inArray(current_user.id, usersToRemove) !== -1;
        if (popup_data.current_user_access === 0) {
          if (delete_self) {
            Materia.Permissions.User.updatePerms([
              {
                user_id: current_user.id,
                expiration: null,
                perms: [false]
              }
            ], function() {
              return Materia.Widget.removeWidget(inst_id);
            });
          }
          Materia.Set.Throbber.stopSpin('#popup');
          return;
        }
        $("#popup.share .user_perm").each(function() {
          var p, userPerm;
          p = $(this).data();
          if (!p.currentUser && !(p.expirationDate !== null && p.expirationDate * 1000 < new Date().valueOf())) {
            collaboration_count++;
          }
          userPerm = {};
          userPerm['user_id'] = p.userId;
          userPerm['expiration'] = p.expirationDate;
          userPerm['perms'] = [];
          userPerm['perms'][p.access] = true;
          return allUserPerms.push(userPerm);
        });
        for (_i = 0, _len = usersToRemove.length; _i < _len; _i++) {
          user = usersToRemove[_i];
          allUserPerms.push({
            user_id: user,
            expiration: null,
            perms: [false]
          });
        }
        Materia.Permissions.User.updatePerms(allUserPerms, function() {
          Materia.Set.Throbber.stopSpin('#popup');
          if (delete_self) {
            Materia.Widget.removeWidget(inst_id);
          }
        });
        str = 'Collaborate';
        if (collaboration_count > 0) {
          str += " (" + collaboration_count + ")";
        }
        return $('#share_widget_link').text(str);
      });
    };
    return {
      init: init,
      buildPermsList: buildPermsList,
      saveAndClose: saveAndClose
    };
  })();

}).call(this);

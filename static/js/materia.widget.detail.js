// Generated by CoffeeScript 1.6.3
(function() {
  Namespace('Materia.Widget').Detail = (function() {
    var SCREENSHOT_AMOUNT, hideToolTip, init, populateDefaults, prepare, showToolTip;
    SCREENSHOT_AMOUNT = 3;
    init = function(gateway) {};
    prepare = function(callback) {
      var nameArr, widgetID;
      nameArr = window.location.pathname.replace("/widgets/", '').split("/");
      widgetID = nameArr.pop().split('-').shift();
      return Materia.Coms.Json.send('widgets_get', [[widgetID]], function(data) {
        populateDefaults(data[0]);
        if (nameArr.length > 1) {
          $('.widget_catalog_button').attr('href', '/');
          return $('.goBackText').text('Go back to the front page');
        }
      });
    };
    populateDefaults = function(widget) {
      var $meta_dataDl, clean_name, clonedLi, data, feature, templateLi, x, _i, _j, _k, _len, _len1, _ref, _ref1;
      clean_name = widget.clean_name;
      $('.widget_icon').attr('src', Materia.Image.iconUrl(widget.dir, 394));
      $('.detail').children('h1').html(widget.name);
      if (widget.meta_data['subheader'] != null) {
        $('.detail').children('h2').html(widget.meta_data['subheader']);
      } else {
        $('.detail').children('h2').remove();
      }
      templateLi = $('.pics').children('li');
      if (widget.meta_data['about'] === 'undefined') {
        widget.meta_data['about'] = 'No description available.';
      }
      $('.detail').after(widget.meta_data['about']);
      for (x = _i = 1; 1 <= SCREENSHOT_AMOUNT ? _i <= SCREENSHOT_AMOUNT : _i >= SCREENSHOT_AMOUNT; x = 1 <= SCREENSHOT_AMOUNT ? ++_i : --_i) {
        clonedLi = $(templateLi).clone();
        $(clonedLi).children('a').attr('href', Materia.Image.screenshotUrl(widget.dir, x)).children('img').attr('src', Materia.Image.screenshotThumbUrl(widget.dir, x));
        $(templateLi).before(clonedLi);
      }
      $('a.grouped_elements').fancybox();
      $(templateLi).remove();
      $meta_dataDl = $('#metaData');
      if ((widget.meta_data['features'] != null) && widget.meta_data['features'].length > 0) {
        $meta_dataDl.append('<dt>Features:</dt>');
        _ref = widget.meta_data['features'];
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          feature = _ref[_j];
          $meta_dataDl.append($('<dd>').append($('<a>').addClass('feature').html(feature)));
        }
      }
      if ((widget.meta_data['supported_data'] != null) && widget.meta_data['supported_data'].length > 0) {
        $meta_dataDl.append('<dt>Supported Data:</dt>');
        _ref1 = widget.meta_data['supported_data'];
        for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
          data = _ref1[_k];
          $meta_dataDl.append($('<dd>').append($('<a>').addClass('supported_data').html(data)));
        }
      }
      $('.widget_detail .feature, .widget_detail .supported_data').hover(function() {
        var description, pos, type;
        pos = null;
        type = null;
        if ($(this).hasClass('feature')) {
          pos = $(this).index('.widget_detail .feature');
          type = '.feature';
        } else if ($(this).hasClass('supported_data')) {
          pos = $(this).index('.widget_detail .supported_data');
          type = '.supported_data';
        }
        description = $(this).html();
        return Materia.Widget.Detail.showToolTip(pos, description, type);
      }, function() {
        return Materia.Widget.Detail.hideToolTip();
      });
      $('#demoLink').attr('href', '/widgets/' + widget.id + '-' + clean_name + '/demo');
      $('#createLink').attr('href', '/widgets/' + widget.id + '-' + clean_name + '/create');
      return $('.page').show();
    };
    showToolTip = function(pos, description, type) {
      var featureItem, height, left, text, top, tt;
      text = '';
      switch (description) {
        case 'Customizable':
          text = 'As the widget creator, you supply the widget with data to make it relevant to your course.';
          break;
        case 'Scorable':
          text = 'This widget collects scores, and is well suited to gauge performance.';
          break;
        case 'Media':
          text = 'This widget uses image media as part of its supported data.';
          break;
        case 'Question/Answer':
          text = 'Users provide a typed response or associate a predefined answer wih each question.';
          break;
        case 'Multiple Choice':
          text = 'Users select a response from a collection of possible answers to questions provided by the widget.';
          break;
        default:
          text = 'This feature has no additional information associated with it.';
      }
      tt = $('<div>').addClass('tooltip').html(text);
      $('.widget_detail').append(tt);
      featureItem = $(type).eq(pos);
      left = featureItem.position().left;
      height = tt.height();
      top = featureItem.position().top - height - 40;
      tt.css({
        'top': top,
        'left': left
      });
      return tt.fadeIn('fast');
    };
    hideToolTip = function() {
      var tt;
      tt = $('.widget_detail').find('.tooltip');
      return $(tt).remove();
    };
    return {
      init: init,
      prepare: prepare,
      showToolTip: showToolTip,
      hideToolTip: hideToolTip
    };
  })();

}).call(this);

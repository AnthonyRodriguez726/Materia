// Generated by CoffeeScript 1.6.3
(function() {
  Namespace('Materia').Creator = (function() {
    var init, onMediaImportComplete, onQuestionImportComplete, _alert, _cancelPreview, _cancelPublish, _creator, _embed, _embedDoneDfd, _embedFlash, _embedHTML, _embedTarget, _enableQuestionImport, _enableReturnLink, _fadeSaveButton, _getMyWidgetsUrl, _getQset, _getWidgetInfo, _getWidgetInstance, _heartbeat, _importerPopup, _initCreator, _inst_id, _instance, _keepQSet, _onCreatorReady, _onInitFail, _onPreviewPopupBlocked, _onPublishPressed, _onSaveCanceled, _requestSave, _resizeCreator, _save, _saveMode, _sendToCreator, _setHeight, _showButtons, _showMediaImporter, _showQuestionImporter, _startHeartBeat, _stopHeartBeat, _type, _widgetType, _widget_id, _widget_info;
    _creator = null;
    _embedDoneDfd = null;
    _embedTarget = null;
    _heartbeat = null;
    _importerPopup = null;
    _inst_id = null;
    _instance = null;
    _keepQSet = null;
    _saveMode = false;
    _type = null;
    _widget_id = null;
    _widget_info = null;
    _widgetType = null;
    _onInitFail = function(msg) {
      _stopHeartBeat();
      if (msg.toLowerCase() !== 'flash player required.') {
        return alert("Failure: " + msg);
      }
    };
    _startHeartBeat = function() {
      var dfd;
      dfd = $.Deferred().resolve();
      _heartbeat = setInterval(function() {
        return Materia.Coms.Json.send('session_valid', [null, false], function(data) {
          if (data === false) {
            alert('You have been logged out due to inactivity.\n\nPlease login again.');
            return window.location.reload();
          }
        });
      }, 30000);
      return dfd.promise();
    };
    _stopHeartBeat = function() {
      return clearInterval(_heartbeat);
    };
    _getWidgetInfo = function() {
      var dfd;
      dfd = $.Deferred();
      Materia.Coms.Json.send('widgets_get', [[_widget_id]], function(widgets) {
        _widget_info = widgets[0];
        return dfd.resolve();
      });
      return dfd.promise();
    };
    _getWidgetInstance = function() {
      var dfd;
      dfd = $.Deferred();
      Materia.Coms.Json.send('widget_instances_get', [[_inst_id]], function(widgetInstances) {
        _instance = widgetInstances[0];
        _widget_info = _instance.widget;
        return dfd.resolve();
      });
      return dfd.promise();
    };
    _enableQuestionImport = function() {
      return $('#importLink').on('click', _showQuestionImporter);
    };
    _getQset = function() {
      var dfd;
      dfd = $.Deferred();
      Materia.Coms.Json.send('question_set_get', [_inst_id], function(data) {
        _keepQSet = data;
        return dfd.resolve();
      });
      return dfd.promise();
    };
    _initCreator = function() {
      var dfd;
      dfd = $.Deferred().resolve();
      if (_inst_id != null) {
        _sendToCreator('initExistingWidget', [_instance.name, _instance.widget, _keepQSet.data, _keepQSet.version, BASE_URL]);
      } else {
        _sendToCreator('initNewWidget', [_widget_info, BASE_URL]);
      }
      return dfd.promise();
    };
    _sendToCreator = function(type, args) {
      switch (_widgetType) {
        case '.swf':
          return _creator[type].apply(_creator, args);
        case '.html':
          return _creator.contentWindow.postMessage(JSON.stringify({
            type: type,
            data: args
          }), STATIC_URL);
      }
    };
    _requestSave = function(mode) {
      _cancelPublish(null, true);
      _cancelPreview(null, true);
      _saveMode = mode;
      switch (_saveMode) {
        case 'publish':
          $('#previewBtnTxt').html('Saving...');
          break;
        case 'save':
          $('#saveBtnTxt').html('Saving...');
      }
      return _sendToCreator('onRequestSave', [mode]);
    };
    _fadeSaveButton = function($button, label, finalLabel) {
      return $button.fadeOut(function() {
        $button.html(label);
        return $button.fadeIn(function() {
          return window.setTimeout(function() {
            return $button.fadeOut(function() {
              $button.html(finalLabel);
              return $button.fadeIn();
            });
          }, 5000);
        });
      });
    };
    _showQuestionImporter = function() {
      var types;
      if (_importerPopup != null) {
        _importerPopup.close();
      }
      types = _widget_info.meta_data.supported_data;
      return _importerPopup = window.open('/questions/import/?type=' + encodeURIComponent(types.join()), 'question_import', 'width=600,height=600');
    };
    _getMyWidgetsUrl = function(inst_id) {
      return "" + BASE_URL + "my-widgets#" + inst_id;
    };
    _embed = function() {
      var creatorPath, dfd;
      dfd = $.Deferred();
      _widgetType = _widget_info.creator.slice(_widget_info.creator.lastIndexOf('.'));
      if (_widget_info.creator.substring(0, 4) === 'http') {
        creatorPath = _widget_info.creator;
      } else {
        creatorPath = WIDGET_URL + _widget_info.dir + _widget_info.creator;
      }
      _type = creatorPath.split('.').pop();
      switch (_type) {
        case 'html':
          _embedHTML(creatorPath, dfd);
          break;
        case 'swf':
          _embedFlash(creatorPath, _widget_info.flash_version, dfd);
      }
      $(window).bind('beforeunload', function() {
        if (_importerPopup != null) {
          return _importerPopup.close();
        }
      });
      return dfd.promise();
    };
    _embedHTML = function(htmlPath, dfd) {
      var $iframe, _onPostMessage;
      _embedDoneDfd = dfd;
      $iframe = $('<iframe src="' + htmlPath + '" id="container" class="html"></iframe>');
      $('#container').replaceWith($iframe);
      _onPostMessage = function(e) {
        var msg, origin;
        origin = "" + e.origin + "/";
        if (origin === STATIC_URL || origin === BASE_URL) {
          msg = JSON.parse(e.data);
          switch (msg.type) {
            case 'start':
              return _onCreatorReady();
            case 'save':
              return _save(msg.data[0], msg.data[1], msg.data[2]);
            case 'cancelSave':
              return _onSaveCanceled(msg.data[0]);
            case 'showMediaImporter':
              return _showMediaImporter();
            case 'setHeight':
              return _setHeight(msg.data[0]);
            case 'alert':
              return _alert(msg.data);
            default:
              return alert("Unknown message from creator: " + msg.type);
          }
        } else {
          return alert("Error, cross domain restricted for " + origin);
        }
      };
      if (typeof addEventListener !== "undefined" && addEventListener !== null) {
        return addEventListener('message', _onPostMessage, false);
      } else if (typeof attachEvent !== "undefined" && attachEvent !== null) {
        return attachEvent('onmessage', _onPostMessage);
      }
    };
    _embedFlash = function(path, version, dfd) {
      var attributes, expressSwf, flashvars, height, params, width;
      window.__materia_flash_onCreatorReady = _onCreatorReady;
      window.__materia_flash_importMedia = _showMediaImporter;
      window.__materia_flash_save = _save;
      window.__materia_flash_cancelSave = _onSaveCanceled;
      _embedDoneDfd = dfd;
      if (swfobject.hasFlashPlayerVersion('1') === false) {
        if ($('#no_flash').length !== 0) {
          return $('#no_flash').css({
            'display': 'block'
          });
        }
      } else {
        flashvars = {
          URL_WEB: BASE_URL,
          URL_GET_ASSET: "" + BASE_URL + "media/",
          widget_id: _widget_id,
          inst_id: _inst_id
        };
        params = {
          menu: 'false',
          allowFullScreen: 'true',
          AllowScriptAccess: 'always'
        };
        attributes = {
          id: _embedTarget
        };
        expressSwf = "" + BASE_URL + "assets/flash/expressInstall.swf";
        width = '100%';
        height = '100%';
        if (typeof ie8Browser !== "undefined" && ie8Browser !== null) {
          width = '99.7%';
          height = '99.7%';
        }
        return swfobject.embedSWF(path, _embedTarget, width, height, version, expressSwf, flashvars, params, attributes);
      }
    };
    _resizeCreator = function() {
      $('.center').height($(window).height() - 145);
      return $('#container').css('position', 'relative');
    };
    _showButtons = function() {
      var dfd;
      dfd = $.Deferred().resolve();
      if (_instance && !_instance.is_draft) {
        $('#creatorPublishBtn').html('Update');
        $('#creatorPreviewBtn').hide();
        $('#creatorSaveBtn').hide();
        $('#action-bar .dot').hide();
      }
      _enableReturnLink();
      _enableQuestionImport();
      $('#action-bar').css('visibility', 'visible');
      return dfd.promise();
    };
    _enableReturnLink = function() {
      if (_inst_id != null) {
        return $('#returnLink').html('&larr; Return to my widgets').attr('href', _getMyWidgetsUrl(_inst_id));
      } else {
        return $('#returnLink').html('&larr; Return to widget catalog').attr('href', BASE_URL + 'widgets');
      }
    };
    _onPublishPressed = function() {
      var $dialog, dialogTemplate;
      _cancelPreview(null, true);
      if ((_inst_id != null) && (_instance != null) && !_instance.is_draft) {
        dialogTemplate = _.template($('#t-update-dialog').html());
      } else {
        dialogTemplate = _.template($('#t-publish-dialog').html());
      }
      $dialog = $(dialogTemplate());
      $dialog.hide();
      $dialog.find('.cancel_button').on('click', _cancelPublish);
      $dialog.find('.action_button').on('click', function() {
        return _requestSave('publish');
      });
      $('#creatorPublishBtn').unbind('click');
      $('.page').prepend($dialog);
      return $('.publish').slideDown('slow');
    };
    _cancelPublish = function(e, instant) {
      if (instant == null) {
        instant = false;
      }
      if (e != null) {
        e.preventDefault();
      }
      $('.publish .action_button, .publish .cancel_button').unbind('click');
      return $('.publish').slideUp((instant ? 'fast' : 'slow'), function() {
        $('.publish').remove();
        return $('#creatorPublishBtn').on('click', _onPublishPressed);
      });
    };
    _onPreviewPopupBlocked = function(url) {
      var $dialog, dialogTemplate;
      dialogTemplate = _.template($('#t-popup-blocked').html());
      $dialog = $(dialogTemplate()).hide();
      $dialog.find('.cancel_button').on('click', _cancelPreview);
      $dialog.find('.action_button').attr('href', url).attr('target', '_blank').on('click', function() {
        return _cancelPreview();
      });
      $('.page').prepend($dialog);
      return $('.preview').slideDown('slow');
    };
    _cancelPreview = function(e, instant) {
      if (instant == null) {
        instant = false;
      }
      if (e != null) {
        e.preventDefault();
      }
      $('.preview .action_button, .preview .cancel_button').unbind('click');
      return $('.preview').slideUp((instant ? 'fast' : 'slow'), function() {
        return $('.preview').remove();
      });
    };
    _onCreatorReady = function() {
      _creator = $('#container').get(0);
      $(window).resize(_resizeCreator);
      _resizeCreator();
      $('#creatorPublishBtn').on('click', _onPublishPressed);
      $('#creatorPreviewBtn').on('click', function() {
        return _requestSave('preview');
      });
      $('#creatorSaveBtn').on('click', function() {
        return _requestSave('save');
      });
      return _embedDoneDfd.resolve();
    };
    _showMediaImporter = function() {
      if (_importerPopup != null) {
        _importerPopup.close();
      }
      _importerPopup = window.open('/media/import', 'question_import', 'width=675,height=600');
      return null;
    };
    _save = function(instanceName, qset, version) {
      if (version == null) {
        version = 1;
      }
      return Materia.Coms.Json.send('widget_instance_save', [
        _widget_id, instanceName, {
          version: version,
          data: qset
        }, _saveMode !== 'publish', _inst_id, null, null, null
      ], function(inst) {
        var popup, url;
        if (inst != null) {
          if (String(_inst_id).length !== 0) {
            window.location.hash = '#' + inst.id;
          }
          switch (_saveMode) {
            case 'preview':
              url = "" + BASE_URL + "preview/" + inst.id;
              popup = window.open(url);
              if (popup != null) {
                return setTimeout(function() {
                  if (!(popup.innerHeight > 0)) {
                    return _onPreviewPopupBlocked(url);
                  }
                }, 200);
              } else {
                return _onPreviewPopupBlocked(url);
              }
              break;
            case 'publish':
              return window.location = _getMyWidgetsUrl(inst.id);
            case 'save':
              _fadeSaveButton($('#saveBtnTxt'), 'Saved!', 'Save Draft');
              _sendToCreator('onSaveComplete', [inst.name, inst.widget, inst.qset.data, inst.qset.version]);
              _inst_id = inst.id;
              return _instance = inst;
          }
        }
      });
    };
    _onSaveCanceled = function(msg) {
      _fadeSaveButton($('#saveBtnTxt'), 'Can Not Save!', 'Save Draft');
      if (msg) {
        return alert("Can not currently save. " + msg);
      }
    };
    _setHeight = function(h) {
      return $('#container').height(h);
    };
    _alert = function(options) {
      var alertWindow, b, buttons, msg, title, type, _i, _len;
      title = options.title;
      msg = options.msg;
      type = options.type;
      alertWindow = $("<div>");
      alertWindow.append('<h1>' + title + '</h1>');
      alertWindow.append('<p>' + msg + '</p>');
      buttons = [];
      switch (type) {
        case 1:
          buttons = ['OK'];
          break;
        case 2:
          buttons = ['OK', 'Cancel'];
          break;
        case 3:
          buttons = ['Yes', 'No'];
      }
      for (_i = 0, _len = buttons.length; _i < _len; _i++) {
        b = buttons[_i];
        alertWindow.append('<button class="action_button">' + b + '</button>');
      }
      return $.jqmodal.standalone({
        modal: true,
        backgroundStyle: 'light',
        className: 'alert',
        html: alertWindow.html(),
        closingSelectors: ['button']
      });
    };
    init = function(container, widget_id, inst_id) {
      _widget_id = widget_id;
      _inst_id = inst_id;
      _embedTarget = container;
      if (window.location.hash) {
        _inst_id = window.location.hash.substr(1);
      }
      if (_inst_id != null) {
        return $.when(_getWidgetInstance()).pipe(_embed).pipe(_getQset).pipe(_initCreator).pipe(_showButtons).pipe(_startHeartBeat).fail(_onInitFail);
      } else {
        return $.when(_getWidgetInfo()).pipe(_embed).pipe(_initCreator).pipe(_showButtons).pipe(_startHeartBeat).fail(_onInitFail);
      }
    };
    onQuestionImportComplete = function(questions) {
      questions = JSON.parse(questions);
      _sendToCreator('onQuestionImportComplete', [questions]);
      if (_importerPopup != null) {
        return _importerPopup.close();
      }
    };
    onMediaImportComplete = function(media) {
      var anArray, element, _i, _len;
      if (_importerPopup != null) {
        _importerPopup.close();
      }
      anArray = [];
      for (_i = 0, _len = media.length; _i < _len; _i++) {
        element = media[_i];
        anArray.push(element);
      }
      return _sendToCreator('onMediaImportComplete', [anArray]);
    };
    return {
      init: init,
      onQuestionImportComplete: onQuestionImportComplete,
      onMediaImportComplete: onMediaImportComplete
    };
  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  Namespace('Materia.MyWidgets').SelectedWidget = (function() {
    var STORAGE_TABLE_MAX_ROWS_SHOWN, copyWidget, createSemesterString, createStorageDataTable, createStorageDataTables, dateRanges, getCurrentSemester, getEmbedLink, getPlayLogs, getScoreSummaries, getSelectedId, getSemesterFromTimestamp, getStorageData, init, loadDateRanges, noAccess, noWidgets, normalizeStorageDataColumns, populateAttempts, populateAvailability, populateDisplay, populateScoreWrapper, processDataIntoSemesters, scoreSummaries, selectedData, selectedWidgetInstId, semesterPlayLogs, setScoreView, setSelected, showAllScores, storageData, toggleShareWidgetContainer, toggleTableSort, updateData, updateGraph, updateSemesterScores, updateSummary, updateTable;
    STORAGE_TABLE_MAX_ROWS_SHOWN = 100;
    selectedWidgetInstId = 0;
    scoreSummaries = {};
    semesterPlayLogs = {};
    storageData = {};
    selectedData = null;
    dateRanges = null;
    init = function(gateway) {
      return $('.show-older-scores-button').click(function(e) {
        e.preventDefault();
        return Materia.MyWidgets.SelectedWidget.showAllScores();
      });
    };
    getSelectedId = function() {
      return selectedWidgetInstId;
    };
    setSelected = function(inst_id) {
      if ($('.page').is(':visible' && !$('section .error').is(':visible'))) {
        Materia.Set.Throbber.startSpin('.page');
      }
      selectedWidgetInstId = inst_id;
      $('.gameSelected').removeClass('gameSelected');
      $('#widget_' + selectedWidgetInstId).addClass('gameSelected');
      Materia.MyWidgets.Statistics.clearGraphs();
      return populateDisplay();
    };
    getCurrentSemester = function() {
      return selectedData.year + ' ' + selectedData.term;
    };
    populateAttempts = function(attemptsAllowed) {
      attemptsAllowed = parseInt(attemptsAllowed, 10);
      return $('#attempts').html(attemptsAllowed > 0 ? attemptsAllowed : 'Unlimited');
    };
    populateAvailability = function(startDateInt, endDateInt) {
      var $availability, availability, end, start;
      if ($('section.directions').is(':visible')) {
        $('section.directions').hide();
        $('section.page').show();
      }
      availability = Materia.Set.Availability.get(startDateInt, endDateInt);
      $availability = $('#avaliability');
      if (endDateInt < 0 && startDateInt < 0) {
        $availability.removeAttr('data-type');
        return $availability.html('Anytime');
      } else if (startDateInt < 0 && endDateInt > 0) {
        $availability.attr('data-type', 'endDateOnly');
        return $availability.html('Open until <span class="available_date">' + availability.end.date + '</span> at <span class="available_time">' + availability.end.time + '</span>');
      } else if (startDateInt > 0 && endDateInt < 0) {
        start = new Date(startDateInt);
        $availability.attr('data-type', 'startDateOnly');
        return $availability.html('Anytime after <span class="available_date">' + availability.start.date + '</span> at <span class="available_time">' + availability.start.time + '</span>');
      } else {
        start = new Date(startDateInt);
        end = new Date(endDateInt);
        $availability.removeAttr('data-type');
        return $availability.html('From <span class="available_date">' + availability.start.date + '</span> at <span class="available_time">' + availability.start.time + '</span> until <span class="available_date">' + availability.end.date + '</span> at <span class="available_time">' + availability.end.time + '</span>');
      }
    };
    noAccess = function() {
      $('section.page').children().hide();
      if ($('section.directions').is(':visible')) {
        $('section.directions').hide();
        $('section.page').show();
      }
      return $('section.page').append($('#t-error').html());
    };
    populateDisplay = function() {
      var count, widgetID;
      count = null;
      widgetID = null;
      if ($('section .error').is(':visible')) {
        $('section .error').remove();
      }
      return Materia.Coms.Json.send('session_valid', ['basic_author'], function(data) {
        return loadDateRanges(function() {
          return Materia.Widget.getWidget(selectedWidgetInstId, function(inst) {
            var $editButton, $scoreWrapper, beardType, clean_name, e, existing, widgetName, _i, _len;
            clean_name = widgetName = inst.clean_name;
            widgetID = inst.widget.id;
            $editButton = $('#edit_button');
            Materia.User.getCurrentUser(function(user) {
              return Materia.Coms.Json.send('permissions_get', [0, inst.id], function(perms) {
                var accessLevel, id, jqmodalOptions, str, user_perms, widget_user_perms;
                user_perms = perms['user_perms'];
                widget_user_perms = perms['widget_user_perms'];
                accessLevel = 0;
                if (typeof user_perms[user.id] !== 'undefined' && typeof user_perms[user.id][0] !== 'undefined') {
                  accessLevel = Number(user_perms[user.id][0]);
                }
                if (accessLevel === 0) {
                  $editButton.unbind();
                  $editButton.attr('href', '#');
                  $editButton.click(function() {
                    return false;
                  });
                  $editButton.addClass('disabled');
                  $('.copy').addClass('disabled');
                  $('#copy_widget_link').addClass('disabled');
                  $('#delete_widget_link').addClass('disabled').parent().addClass('disabled');
                } else {
                  if (Number(inst.widget.is_editable) === 1) {
                    $editButton.removeClass('disabled');
                  } else {
                    $editButton.unbind();
                    $editButton.attr('href', '#');
                    $editButton.click(function() {
                      return false;
                    });
                    $editButton.addClass('disabled');
                  }
                  $('.copy').removeClass('disabled');
                  $('#copy_widget_link').removeClass('disabled');
                  $('#delete_widget_link').removeClass('disabled').parent().removeClass('disabled');
                }
                if (accessLevel === 0 || inst.is_draft === true) {
                  $('.attempts_parent').addClass('disabled');
                  $('#edit-avaliability-button').addClass('disabled');
                  $('#attempts').addClass('disabled');
                  $('#avaliability').addClass('disabled');
                } else {
                  $('.attempts_parent').removeClass('disabled');
                  $('.copy').removeClass('disabled');
                  $('#copy_widget_link').removeClass('disabled');
                  $('#copy_widget_link').unbind('click');
                  $('#delete_widget_link').removeClass('disabled');
                  $('#delete_widget_link').unbind('click');
                  $('#edit-avaliability-button').removeClass('disabled');
                  $('#attempts').removeClass('disabled');
                  $('#avaliability').removeClass('disabled');
                }
                $('#edit-avaliability-button').unbind('click');
                $('#attempts').unbind('click');
                $('#avaliability').unbind('click');
                jqmodalOptions = {
                  modal: true,
                  backgroundStyle: 'light',
                  className: 'availability',
                  html: $('#t-availibility').html(),
                  closingSelectors: ['.cancel_button']
                };
                $('#edit-avaliability-button').not('.disabled').jqmodal(jqmodalOptions, Materia.MyWidgets.Availability.popup);
                $('#attempts').not('.disabled').jqmodal(jqmodalOptions, Materia.MyWidgets.Availability.popup);
                $('#avaliability').not('.disabled').jqmodal(jqmodalOptions, Materia.MyWidgets.Availability.popup);
                $('.copy').unbind('click');
                $('.copy.disabled').click(function() {
                  return false;
                });
                $('.copy').not('.disabled').jqmodal({
                  modal: true,
                  backgroundStyle: 'light',
                  className: 'copy',
                  html: $('#t-copy-popup').html(),
                  closingSelectors: ['.cancel_button']
                }, function() {
                  var newTitle;
                  $('#popup.copy input').focus();
                  newTitle = $('#popup.copy input.newtitle').val();
                  $('#popup.copy input.newtitle').keypress(function(e) {
                    if (e.which === 10 || e.which === 13) {
                      return copyWidget();
                    }
                  });
                  return $('#popup.copy .copy_button').click(function(e) {
                    e.preventDefault();
                    return copyWidget();
                  });
                });
                $('.delete_dialogue').hide();
                $('.additional_options').fadeIn('fast');
                $('.delete').unbind('click');
                $('.delete.disabled').click(function() {
                  return false;
                });
                $('.delete').not('.disabled').toggle(function() {
                  $('.additional_options').hide();
                  $('.delete_dialogue').fadeIn('fast');
                  return $('.delete_dialogue').show();
                }, function() {
                  $('.delete_dialogue').hide();
                  return $('.additional_options').fadeIn('fast');
                });
                count = 0;
                for (id in widget_user_perms) {
                  if (id !== user.id) {
                    count++;
                  }
                }
                str = 'Collaborate';
                if (count > 0) {
                  str += ' (' + count + ')';
                }
                return $('#share_widget_link').text(str);
              });
            });
            populateAvailability(inst.open_at, inst.close_at);
            populateAttempts(inst.attempts);
            $('.page hgroup h1').html(inst.name);
            $('.page hgroup h3').html(inst.widget.name);
            $('.overview .icon').attr('src', Materia.Image.iconUrl(inst.widget.dir, 275));
            if (typeof BEARD_MODE !== 'undefined' && BEARD_MODE === true) {
              existing = $('.overview .icon_container').attr('class').split(' ');
              for (_i = 0, _len = existing.length; _i < _len; _i++) {
                e = existing[_i];
                if (e !== 'icon_container' && e !== 'big_bearded') {
                  $('.overview .icon_container').removeClass(e);
                }
              }
              beardType = $('.widget.gameSelected .icon').attr('class').split(' ')[2];
              beardType = 'med' + beardType.substring(5);
              $('.overview .icon_container').addClass('big_bearded');
              $('.overview .icon_container').addClass(beardType);
            }
            if ($('.page').is(':hidden')) {
              $('.page').show();
            } else {
              $('.page').children().show();
            }
            $('#preview_button').attr('href', '/preview/' + selectedWidgetInstId + '/' + inst.clean_name).click(function() {
              if ($(this).hasClass('disabled')) {
                return false;
              }
            });
            $editButton.attr('href', BASE_URL + 'edit/' + selectedWidgetInstId + '/' + inst.clean_name);
            $editButton.unbind('click');
            if (inst.is_draft || inst.widget.is_playable === 0) {
              $('.share-widget-container').addClass('draft').fadeTo('fast', 0.3).children('h3').html('Publish to share with your students');
              $('#play_link').attr('disabled', 'disabled');
              $editButton.click(function() {
                Materia.Coms.Json.send('widget_instance_lock', [selectedWidgetInstId], function(success) {
                  if (success) {
                    return window.location = $editButton.attr('href');
                  } else {
                    return alert('This widget is currently locked you will be able to edit this widget when it is no longer being edited by somebody else.');
                  }
                });
                return false;
              });
            } else {
              $('.share-widget-container').removeClass('draft').fadeTo('fast', 1).children('h3').html('Share with your students');
              $('#play_link').unbind('click').val(BASE_URL + 'play/' + String(selectedWidgetInstId) + '/' + inst.clean_name).click(function() {
                return $(this).select();
              });
              $('#embed_link').unbind('click').val(getEmbedLink(inst)).click(function() {
                return $(this).select();
              });
              $('.share-widget-container input').removeAttr('disabled');
              $editButton.jqmodal({
                modal: true,
                backgroundStyle: 'light',
                className: 'edit-published-widget',
                html: $('#t-edit-widget-published').html(),
                closingSelectors: ['.cancel_button']
              }, function() {
                return $('.edit-published-widget .action_button').attr('href', $editButton.attr('href'));
              });
            }
            if (!inst.widget.is_draft) {
              $('.my_widgets .page .scores').show();
              $('.my_widgets .page .embed').show();
              if (!inst.widget.is_scorable) {
                $('.my_widgets .page .scores').hide();
              }
              $('#play_link').val(BASE_URL + 'play/' + String(selectedWidgetInstId) + '/' + inst.clean_name);
              $('#embed_link').val(getEmbedLink(inst));
              $('#embed_link').hide();
              $('.share-widget-container span').unbind('click');
              $('.share-widget-container span').click(function(e) {
                e.preventDefault;
                return $('#embed_link').slideToggle('fast');
              });
              toggleShareWidgetContainer('close');
              if ($('.container:hidden').length > 0) {
                $('.container').fadeIn();
              }
              $scoreWrapper = $('.scoreWrapper');
              if ($scoreWrapper.length > 1) {
                $scoreWrapper.slice(1).remove();
              }
              $('.show-older-scores-button').hide();
              $('.chart').attr('id', '').empty();
              getScoreSummaries(selectedWidgetInstId, function(data) {
                var $exportScoresButton, d, hasScores, _j, _len1, _ref;
                $('#export_scores_button').unbind();
                $exportScoresButton = $('#export_scores_button');
                if (data.list.length === 0) {
                  $exportScoresButton.addClass('disabled');
                  $('.noScores').show();
                  return $scoreWrapper.hide();
                } else {
                  $('.noScores').hide();
                  populateScoreWrapper($scoreWrapper, data.last);
                  if (data.list.length > 1) {
                    $('.show-older-scores-button').show();
                  }
                  hasScores = false;
                  _ref = data.list;
                  for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                    d = _ref[_j];
                    if (d.distribution != null) {
                      hasScores = true;
                      break;
                    }
                  }
                  if (hasScores) {
                    $exportScoresButton.removeClass('disabled');
                  } else {
                    $exportScoresButton.addClass('disabled');
                  }
                  return $('#export_scores_button:not(".disabled")').jqmodal({
                    modal: true,
                    className: 'csv_popup',
                    html: $('#t-csv').html(),
                    closingSelectors: ['.cancel', '.download']
                  }, function() {
                    return Materia.MyWidgets.Csv.buildPopup();
                  });
                }
              });
            } else {
              $('.my_widgets .page .scores').hide();
              $('.my_widgets .page .embed').hide();
            }
            if (inst.widget.is_playable === 0) {
              $('#preview_button').addClass('disabled');
              $('.arrow_right').addClass('disabled');
            } else {
              $('#preview_button').removeClass('disabled');
              $('.arrow_right').removeClass('disabled');
            }
            return Materia.Set.Throbber.stopSpin('.page');
          });
        });
      });
    };
    copyWidget = function() {
      var field, inst_id, newTitle;
      $('#popup.copy .copy_error').hide();
      field = $('#popup.copy input.newtitle');
      if (field.val().length > 0 && field.val() !== newTitle) {
        inst_id = $('.gameSelected').attr('id').split('_')[1];
        Materia.MyWidgets.Tasks.copyWidget(inst_id, field.val());
        return $('#popup.copy .cancel_button').click();
      } else {
        $('#popup.copy .copy_error').css('display', 'block');
        return newTitle = field.val();
      }
    };
    getEmbedLink = function(inst) {
      var draft, height, width;
      width = String(inst.widget.width) !== '0' ? inst.widget.width : 800;
      height = String(inst.widget.height) !== '0' ? inst.widget.height : 600;
      draft = inst.is_draft ? "" + inst.widget.name + " Widget" : inst.name;
      return "<iframe src='" + BASE_URL + "embed/" + selectedWidgetInstId + "/" + inst.clean_name + "' width='" + width + "' height='" + height + "' style='margin:0;padding:0;border:0;'><a href='" + BASE_URL + "play/" + selectedWidgetInstId + "/" + inst.clean_name + "'>" + draft + "</a></iframe>";
    };
    loadDateRanges = function(callback) {
      if (dateRanges == null) {
        return Materia.Coms.Json.send('semester_date_ranges_get', [], function(data) {
          dateRanges = data;
          return callback();
        });
      } else {
        return callback();
      }
    };
    toggleShareWidgetContainer = function(state) {
      var $shareWidgetContainer, _ref;
      $shareWidgetContainer = $('.share-widget-container');
      if (state == null) {
        state = (_ref = $shareWidgetContainer.hasClass('closed')) != null ? _ref : {
          'open': 'close'
        };
      }
      if (state === 'open') {
        return $shareWidgetContainer.switchClass('closed', '', 200);
      } else if (state === 'close') {
        return $shareWidgetContainer.switchClass('', 'closed', 200);
      }
    };
    populateScoreWrapper = function($scoreWrapper, data) {
      $scoreWrapper.attr('data-semester', data.id);
      $scoreWrapper.attr('data-semester-str', createSemesterString(data));
      $scoreWrapper.find('.view').html(data.term + ' ' + data.year);
      if (typeof data.distribution === 'undefined' && typeof data.storage !== 'undefined') {
        $scoreWrapper.show();
        $scoreWrapper.find('li:nth-child(1) a').hide();
        $scoreWrapper.find('li:nth-child(2) a').hide();
        $scoreWrapper.find('li:nth-child(3) a').show();
        return setScoreView(data.id, 'data');
      } else {
        $scoreWrapper.show();
        $scoreWrapper.find('li:nth-child(1) a').show();
        $scoreWrapper.find('li:nth-child(2) a').show();
        if (typeof data.storage === 'undefined') {
          $scoreWrapper.find('li:nth-child(3) a').hide();
        } else {
          $scoreWrapper.find('li:nth-child(3) a').show();
        }
        $scoreWrapper.find('.chart').attr('id', 'chart_' + data.id);
        return setScoreView(data.id, 'graph');
      }
    };
    processDataIntoSemesters = function(logs, getTimestampFunction) {
      var semesters, timestamp;
      semesters = {};
      timestamp = null;
      $.each(logs, function(i, log) {
        var logMeta, semesterString;
        timestamp = getTimestampFunction(log);
        logMeta = getSemesterFromTimestamp(timestamp);
        semesterString = logMeta.year + ' ' + logMeta.semester.toLowerCase();
        if (!semesters[semesterString]) {
          semesters[semesterString] = [];
        }
        return semesters[semesterString].push(log);
      });
      return semesters;
    };
    getSemesterFromTimestamp = function(timestamp) {
      var range, _i, _len;
      for (_i = 0, _len = dateRanges.length; _i < _len; _i++) {
        range = dateRanges[_i];
        if (timestamp >= parseInt(range.start, 10) && timestamp <= parseInt(range.end, 10)) {
          return range;
        }
      }
      return void 0;
    };
    normalizeStorageDataColumns = function(rows) {
      curRow;
      var curRow, fields, j, r, _i, _j, _k, _len, _len1, _len2;
      fields = {};
      for (_i = 0, _len = rows.length; _i < _len; _i++) {
        r = rows[_i];
        curRow = r.data;
        for (_j = 0, _len1 = curRow.length; _j < _len1; _j++) {
          j = curRow[_j];
          if (typeof j === 'undefined') {
            j = null;
          }
        }
      }
      for (_k = 0, _len2 = rows.length; _k < _len2; _k++) {
        r = rows[_k];
        r.data = $.extend({}, fields, r.data);
      }
      return rows;
    };
    setScoreView = function(semester, newScoreView) {
      var $scoreWrapper;
      $scoreWrapper = $('.scoreWrapper[data-semester="' + semester + '"]');
      $scoreWrapper.attr('data-score-view', newScoreView);
      $scoreWrapper.find('.choices li.scoreTypeSelected').removeClass('scoreTypeSelected');
      $scoreWrapper.find('.display.table').hide();
      $scoreWrapper.find('.display.graph').hide();
      $scoreWrapper.find('.display.data').hide();
      switch (newScoreView) {
        case 'graph':
          $scoreWrapper.find('.display.graph').show();
          $scoreWrapper.find('.choices li:first-child').addClass('scoreTypeSelected');
          $scoreWrapper.find('.numeric li').show();
          break;
        case 'table':
          $scoreWrapper.find('.display.table').show();
          $scoreWrapper.find('.choices li:nth-child(2)').addClass('scoreTypeSelected');
          $scoreWrapper.find('.numeric li').show();
          break;
        case 'data':
          $scoreWrapper.find('.display.data').show();
          $scoreWrapper.find('.choices li:nth-child(3)').addClass('scoreTypeSelected');
          $scoreWrapper.find('.numeric li').hide();
      }
      return updateSemesterScores(semester);
    };
    updateSemesterScores = function(semester) {
      var $scoreWrapper, scoreView;
      $scoreWrapper = $('.scoreWrapper[data-semester="' + semester + '"]');
      scoreView = $scoreWrapper.attr('data-score-view');
      switch (scoreView) {
        case 'table':
          updateTable($scoreWrapper);
          break;
        case 'data':
          updateData($scoreWrapper);
          break;
        default:
          updateGraph($scoreWrapper);
      }
      return updateSummary(semester);
    };
    getScoreSummaries = function(inst_id, callback) {
      if (typeof scoreSummaries[inst_id] === 'undefined') {
        return Materia.Coms.Json.send('score_summary_get', [inst_id, true], function(data) {
          var d, last, o, _i, _len;
          if (data !== null && data.length > 0) {
            o = {};
            last = data[0].id;
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              d = data[_i];
              o[d.id] = d;
            }
            scoreSummaries[inst_id] = {
              list: data,
              map: o,
              last: data[0]
            };
          } else {
            scoreSummaries[inst_id] = {
              list: [],
              map: {},
              last: void 0
            };
          }
          return callback(scoreSummaries[inst_id]);
        });
      } else {
        return callback(scoreSummaries[inst_id]);
      }
    };
    getPlayLogs = function(inst_id, semester, year, callback) {
      var logKey;
      logKey = "" + semester + "_" + year + "_" + inst_id;
      if (semesterPlayLogs[logKey] == null) {
        return Materia.Coms.Json.send('play_logs_get', [inst_id, semester, year], function(logs) {
          semesterPlayLogs[logKey] = processDataIntoSemesters(logs, function(o) {
            return o.time;
          });
          return callback(semesterPlayLogs[logKey]);
        });
      } else {
        return callback(semesterPlayLogs[logKey]);
      }
    };
    getStorageData = function(inst_id, callback) {
      if (typeof storageData[inst_id] === 'undefined') {
        return Materia.Coms.Json.send('play_storage_get', [inst_id], function(data) {
          var getPlayTime, semesterData, semesterId, semestersData, tableData, tableName, temp;
          storageData[inst_id] = {};
          temp = {};
          getPlayTime = function(o) {
            return o.play.time;
          };
          for (tableName in data) {
            tableData = data[tableName];
            temp[tableName] = processDataIntoSemesters(tableData, getPlayTime);
          }
          for (tableName in temp) {
            semestersData = temp[tableName];
            for (semesterId in semestersData) {
              semesterData = semestersData[semesterId];
              if (typeof storageData[inst_id][semesterId] === 'undefined') {
                storageData[inst_id][semesterId] = {};
              }
              if (semesterData.length > STORAGE_TABLE_MAX_ROWS_SHOWN) {
                storageData[inst_id][semesterId][tableName] = {
                  truncated: true,
                  total: semesterData.length,
                  data: semesterData.slice(0, STORAGE_TABLE_MAX_ROWS_SHOWN)
                };
              } else {
                storageData[inst_id][semesterId][tableName] = {
                  truncated: false,
                  data: semesterData
                };
              }
              storageData[inst_id][semesterId][tableName].data = normalizeStorageDataColumns(storageData[inst_id][semesterId][tableName].data);
            }
          }
          return callback(storageData[inst_id]);
        });
      } else {
        return callback(storageData[inst_id]);
      }
    };
    updateSummary = function(semester) {
      return getScoreSummaries(selectedWidgetInstId, function(data) {
        var $scoreWrapper, dis, plays, semesterData, _i, _len, _ref;
        semesterData = data.map[semester];
        $scoreWrapper = $('.scoreWrapper[data-semester="' + semester + '"]');
        plays = 0;
        if (semesterData.students != null) {
          $scoreWrapper.find('.players').html(semesterData.students);
        }
        if (semesterData.average != null) {
          $scoreWrapper.find('.final-average').html(semesterData.average);
        }
        if (semesterData.distribution != null) {
          _ref = semesterData.distribution;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            dis = _ref[_i];
            plays += dis;
          }
          return $scoreWrapper.find('.score-count').html(plays);
        }
      });
    };
    updateGraph = function($scoreWrapper) {
      var semester;
      semester = $scoreWrapper.attr('data-semester');
      Materia.Set.Throbber.startSpin('.scoreWrapper[data-semester="' + semester + '"]"');
      return getScoreSummaries(selectedWidgetInstId, function(data) {
        var brackets;
        Materia.Set.Throbber.stopSpin('.scoreWrapper[data-semester="' + semester + '"]"');
        brackets = data.map[semester].distribution;
        return Materia.MyWidgets.Statistics.createGraph('chart_' + semester, brackets);
      });
    };
    updateTable = function($scoreWrapper) {
      var semester, semesterStr;
      semester = $scoreWrapper.attr('data-semester');
      semesterStr = $scoreWrapper.attr('data-semester-str');
      Materia.Set.Throbber.startSpin('.scoreWrapper[data-semester="' + semester + '"] .display.table');
      return getPlayLogs(selectedWidgetInstId, semesterStr.split('_')[1], semesterStr.split('_')[0], function(logsBySemester) {
        var $table, tableSort;
        $table = $scoreWrapper.find('.display.table');
        tableSort = $table.attr('data-sort');
        Materia.MyWidgets.Statistics.createTable($table, logsBySemester[semesterStr.replace('_', ' ')], tableSort);
        return Materia.Set.Throbber.stopSpin('.scoreWrapper[data-semester="' + semester + '"] .display.table');
      });
    };
    updateData = function($scoreWrapper) {
      var semester, semesterStr;
      semester = $scoreWrapper.attr('data-semester');
      semesterStr = $scoreWrapper.attr('data-semester-str');
      Materia.Set.Throbber.startSpin('.scoreWrapper[data-semester="' + semester + '"] .data');
      return getStorageData(selectedWidgetInstId, function(data) {
        createStorageDataTables(data[semesterStr.replace('_', ' ')], $scoreWrapper.find('.display.data'));
        return Materia.Set.Throbber.stopSpin('.scoreWrapper[data-semester="' + semester + '"] .data');
      });
    };
    createStorageDataTables = function(tables, $element) {
      var $label, $select, name, tableData, tableName, tableNames, _i, _len;
      $element.empty();
      tableNames = [];
      $label = $('<div class="table-label"><h4>Table:</h4></div>');
      $select = null;
      for (tableName in tables) {
        tableData = tables[tableName];
        tableNames.push(tableName);
      }
      if (tableNames.length === 1) {
        $label.append('<span>' + tableNames[0] + '</span>');
      } else {
        $select = $('<select></select>');
        for (_i = 0, _len = tableNames.length; _i < _len; _i++) {
          name = tableNames[_i];
          $select.append('<option value="' + name + '">' + name + '</option>');
        }
        $select.change(function(event) {
          var selectedTableName, semester;
          semester = $(event.target).parents('.scoreWrapper').attr('data-semester-str');
          selectedTableName = $(event.target).find(':selected').val();
          return getStorageData(selectedWidgetInstId, function(data) {
            return createStorageDataTable(data[semester.toLowerCase().replace('_', ' ')][selectedTableName], $element);
          });
        });
        $label.append($select);
      }
      $element.append($label);
      $element.prepend('<a class="storage">Download Table</a>');
      $('.storage').click(function(event) {
        var $scoreWrapper, $tableLabel, semester, table;
        event.preventDefault();
        $scoreWrapper = $(event.target).parents('.scoreWrapper');
        $tableLabel = $scoreWrapper.find('.table-label');
        table = '';
        if ($tableLabel.find('select').length > 0) {
          table = $tableLabel.find('select').val();
        } else {
          table = $tableLabel.find('span').text();
        }
        if (table !== '') {
          semester = $scoreWrapper.attr('data-semester-str').replace('_', '-');
          return window.location = '/scores/storage/' + selectedWidgetInstId + '/' + table + '/' + semester;
        }
      });
      return createStorageDataTable(tables[tableNames[0]], $element);
    };
    createStorageDataTable = function(tableObject, $element) {
      var $curTr, $headers, $table, $tbody, fieldData, fieldName, len, nullValue, row, rowData, rowName, rows, _i, _len, _ref, _ref1;
      $element.find('.dataTables_wrapper').remove();
      $element.find('.truncated-table').remove();
      if (tableObject.truncated) {
        $element.append('<p class="truncated-table">Showing only the first ' + STORAGE_TABLE_MAX_ROWS_SHOWN + ' entries of this table. Download the table to see all ' + tableObject.total.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',') + ' entries.</p>');
      }
      rows = tableObject.data;
      if (rows.length > 0) {
        $table = $('<table></table>');
        $headers = $('<tr><th>user</th><th>firstName</th><th>lastName</th><th>time</th></tr>');
        $tbody = $('<tbody></tbody>');
        $curTr;
        nullValue;
        len = rows.length;
        _ref = rows[0].data;
        for (rowName in _ref) {
          rowData = _ref[rowName];
          $headers.append('<th>' + rowName + '</th>');
        }
        $headers.wrap('<thead>');
        $table.append($headers.parent());
        for (_i = 0, _len = rows.length; _i < _len; _i++) {
          row = rows[_i];
          $curTr = $('<tr><td>' + row.play.user + '</td><td>' + row.play.firstName + '</td><td>' + row.play.lastName + '</td><td>' + row.play.time + '</td></tr>');
          _ref1 = row.data;
          for (fieldName in _ref1) {
            fieldData = _ref1[fieldName];
            nullValue = fieldData === null;
            if (nullValue) {
              fieldData = '--';
            }
            $curTr.append('<td' + (nullValue ? ' class="null"' : '') + '>' + fieldData + '</td>');
          }
          $tbody.append($curTr);
        }
        $table.append($tbody);
        $element.append($table);
        return $table.dataTable({
          sScrollX: '100%'
        });
      }
    };
    toggleTableSort = function(semester) {
      var $scoreWrapper, $table, tableSort;
      $scoreWrapper = $('.scoreWrapper[data-semester="' + semester + '"]');
      $table = $scoreWrapper.find('.display.table');
      tableSort = $table.attr('data-sort');
      if ($(this).hasClass('up')) {
        $(this).removeClass('up').addClass('down');
      } else if ($(this).hasClass('down')) {
        $(this).removeClass('down').addClass('up');
      }
      $table.attr('data-sort', tableSort === 'desc' ? 'asc' : 'desc');
      return updateTable($scoreWrapper);
    };
    showAllScores = function() {
      return getScoreSummaries(selectedWidgetInstId, function(data) {
        var $clone, $scores, $semester, i, _i, _ref, _results;
        $semester = $('.scoreWrapper');
        $scores = $('.scores');
        $('.show-older-scores-button').hide();
        _results = [];
        for (i = _i = 1, _ref = data.list.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          $clone = $semester.clone();
          $scores.append($clone);
          _results.push(populateScoreWrapper($clone, data.list[i]));
        }
        return _results;
      });
    };
    createSemesterString = function(o) {
      return (o.year + '_' + o.term).toLowerCase();
    };
    noWidgets = function() {
      var rightSide;
      $('section.page').hide();
      rightSide = $('section.directions');
      rightSide.show();
      rightSide.children('h1').html('You have no widgets!');
      rightSide.children('p').html('Make a new widget in the widget catalog.');
      return $('header nav ul li:first-child').qtip({
        content: 'Click here to start making a new widget!',
        position: {
          corner: {
            target: 'bottomMiddle',
            tooltip: 'topMiddle'
          },
          adjust: {
            y: 15
          }
        },
        style: {
          background: '#b944cc',
          color: '#ffffff',
          padding: 10,
          border: {
            width: 2,
            radius: 5,
            color: '#b944cc'
          },
          tip: {
            corner: 'topMiddle',
            size: {
              width: 15,
              height: 10
            }
          }
        },
        show: {
          ready: true
        }
      });
    };
    return {
      init: init,
      noAccess: noAccess,
      populateAvailability: populateAvailability,
      populateAttempts: populateAttempts,
      setSelected: setSelected,
      getCurrentSemester: getCurrentSemester,
      setScoreView: setScoreView,
      toggleTableSort: toggleTableSort,
      showAllScores: showAllScores,
      toggleShareWidgetContainer: toggleShareWidgetContainer,
      selectedWidgetInstId: selectedWidgetInstId,
      noWidgets: noWidgets,
      getSelectedId: getSelectedId
    };
  })();

}).call(this);

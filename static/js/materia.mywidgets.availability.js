// Generated by CoffeeScript 1.6.3
(function() {
  Namespace('Materia.MyWidgets').Availability = (function() {
    var init, popup, _changeAvailability, _checkAttempts, _dateFormatter, _inst, _parseSubmittedInfo, _setSlider, _submittedAttempts, _times;
    _inst = {};
    _submittedAttempts = null;
    _times = {};
    _parseSubmittedInfo = function() {
      var errors, reason, success, type;
      success = true;
      errors = {
        type: [],
        reason: []
      };
      $('.error').removeClass('error');
      $('.toFrom li input.availability:checked').each(function() {
        var ampm, date, dateObj, datesParent, fullDate, hourBounds, hourLength, hourMinute, idCheck, minuteBounds, minuteLength, startOrEnd, time, timeObj;
        idCheck = $(this).attr('id');
        startOrEnd = idCheck.match('From') ? 'start' : 'end';
        datesParent = $(this).closest('.datePicker');
        dateObj = datesParent.find('input.date');
        timeObj = datesParent.find('input.time');
        date = $(dateObj).val();
        time = $(timeObj).val();
        ampm = datesParent.find('.ampm.selected').text();
        hourMinute = ['', ''];
        if ((time != null)) {
          hourMinute = time.split(':');
        }
        if (hourMinute[0] === '') {
          hourLength = true;
        } else {
          hourLength = hourMinute[0].length < 3;
        }
        if (hourMinute[1] != null) {
          if (hourMinute[1] === '') {
            minuteLength = true;
          } else {
            minuteLength = hourMinute[1].length < 3;
          }
        }
        hourBounds = Number(hourMinute[0]) < 13;
        minuteBounds = Number(hourMinute[1]) < 60;
        if (time === '') {
          time = startOrEnd === 'start' ? '6:00' : '11:59';
          ampm = startOrEnd === 'start' ? 'am' : 'pm';
        }
        if (idCheck.match('anytime')) {
          return _times[startOrEnd] = -1;
        } else {
          if (date === '') {
            dateObj.addClass('error');
            success = false;
            if ($.inArray('Date', errors.type) < 0) {
              errors.type.push('Date');
            }
            if ($.inArray('missing', errors.reason) < 0) {
              return errors.reason.push('missing');
            }
          } else if (!hourLength || !minuteLength || !hourBounds || !minuteBounds || !time.match(/[0-9]{1,2}:[0-9]{2}/)) {
            if ($.inArray('Time', errors.type) < 0) {
              errors.type.push('Time');
            }
            timeObj.addClass('error');
            success = false;
            if (time === '' && $.inArray('missing', errors.reason) < 0) {
              return errors.reason.push('missing');
            } else if ($.inArray('invalid', errors.reason) < 0) {
              return errors.reason.push('invalid');
            }
          } else {
            fullDate = date + " " + time + ampm;
            return _times[startOrEnd] = Date.parse(fullDate).getTime() / 1000;
          }
        }
      });
      if (success) {
        return true;
      } else {
        type = errors.type.length > 1 ? "" + errors.type[0] + "s and " + errors.type[1] + "s are " : "" + errors.type[0] + " is ";
        reason = errors.reason.length > 1 ? "" + errors.reason[0] + "/" + errors.reason[1] : errors.reason[0];
        $('.availabilityError').remove();
        $('.attemptsPopup').before('<p class="availabilityError">' + type + reason + '</p>');
        return false;
      }
    };
    _dateFormatter = function(range) {
      var ampm, date, endInfo, startInfo, timeSet;
      date = [];
      date['start'] = '';
      date['end'] = '';
      startInfo = null;
      endInfo = null;
      timeSet = $('#avaliability').text().match(/[0-9]+\/[0-9]+\/[0-9]+ at [0-9]+:[0-9]+(am|pm)/g);
      if (timeSet != null) {
        if (timeSet[0] && range !== 'to') {
          startInfo = timeSet[0].split(' at ');
        }
        if (timeSet[1]) {
          endInfo = timeSet[1].split(' at ');
        } else if (range === 'to') {
          endInfo = timeSet[0].split(' at ');
        }
      }
      if (startInfo) {
        date['start'] = startInfo[0];
        $(".date.from").val(startInfo[0]);
        ampm = startInfo[1].match(/(am|pm)/)[1];
        $('#startTime').val(startInfo[1].slice(0, -2));
        $('.start.ampm.' + ampm).trigger('click');
      }
      if (endInfo) {
        date['end'] = endInfo[0];
        $(".date.to").val(endInfo[0]);
        ampm = endInfo[1].match(/(am|pm)/)[1];
        $('#endTime').val(endInfo[1].slice(0, -2));
        $('.end.ampm.' + ampm).trigger('click');
      }
      $(".time").blur(function() {
        var val;
        val = $(this).val();
        if (!val.match(':') && val < 13 && val !== '') {
          return $(this).val("" + val + ":00");
        }
      });
      return date;
    };
    _checkAttempts = function(number) {
      var num;
      num = Math.floor(number / 1000);
      if ($('.attemptHolder #value_' + num).length > 0) {
        $('.attemptHolder li.selected').removeClass('selected');
        return $('.attemptHolder #value_' + num).addClass('selected');
      } else if ($('#value_' + (num + 2)).length > 0 && (num + 2) > 4) {
        $('.attemptHolder li.selected').removeClass('selected');
        return $('.attemptHolder #value_' + (num + 2)).addClass('selected');
      } else if ($('#value_' + (num - 2)).length > 0 && (num - 2) > 4) {
        $('.attemptHolder li.selected').removeClass('selected');
        return $('.attemptHolder #value_' + (num - 2)).addClass('selected');
      }
    };
    _setSlider = function() {
      var attemptsValue, idNum, realNum;
      idNum = $(".attemptHolder li.selected").attr('id').split('_')[1];
      attemptsValue = $(".selected").html();
      realNum = parseInt(idNum, 10) * 1000;
      $(".selector").slider('value', realNum);
      $('#valueHolder').html(attemptsValue);
      _submittedAttempts = parseInt(idNum);
      if (_submittedAttempts === 25) {
        _submittedAttempts = -1;
      }
    };
    _changeAvailability = function(callback) {
      return Materia.Widget.saveWidget({
        inst_id: _inst.id,
        open_at: _times['start'],
        close_at: _times['end'],
        attempts: _submittedAttempts
      }, function(widget) {}, Materia.MyWidgets.SelectedWidget.populateAvailability(_times['start'], _times['end']), Materia.MyWidgets.SelectedWidget.populateAttempts(parseInt(_submittedAttempts, 10)), callback());
    };
    init = function(gateway) {};
    popup = function() {
      var gameId;
      gameId = $('.gameSelected').attr('id').split('_')[1];
      return Materia.WidgetInstance.get(gameId, function(inst) {
        var date, range;
        _inst = inst;
        $('.selector').slider({
          value: _inst.attempts < 0 ? 25000 : _inst.attempts * 1000,
          min: 1000,
          max: 25000,
          create: function(event) {
            var ui;
            ui = {};
            ui.value = _inst.attempts < 0 ? 25000 : _inst.attempts * 1000;
            _checkAttempts(ui.value);
            return _setSlider();
          },
          slide: function(event, ui) {
            return _checkAttempts(ui.value);
          },
          stop: function(event, ui) {
            return _setSlider();
          }
        });
        switch (false) {
          case !(_inst.close_at < 0 && _inst.open_at < 0):
            range = 'none';
            break;
          case !(_inst.open_at < 0 && _inst.close_at > 0):
            range = 'to';
            break;
          case !(_inst.open_at > 0 && _inst.close_at < 0):
            range = 'from';
            break;
          default:
            range = 'toFrom';
        }
        $('.start.ampm').add($('.end.ampm')).click(function() {
          var $this;
          $this = $(this);
          if ($this.is('.pm')) {
            $this.addClass('selected');
            return $this.parent().children('.am').removeClass('selected');
          } else {
            $this.addClass('selected');
            return $this.parent().children('.pm').removeClass('selected');
          }
        });
        date = _dateFormatter(range);
        $(".date.from").datepicker({
          maxDate: date['end'],
          onSelect: function(dateText, inst) {
            return $('.date.to').datepicker('option', {
              minDate: dateText
            });
          }
        });
        $(".date.to").datepicker({
          minDate: date['start'],
          onSelect: function(dateText, inst) {
            return $('.date.from').datepicker('option', {
              maxDate: dateText
            });
          }
        });
        $('.date, .time').click(function() {
          return $(this).closest('.datePicker').find('.specify.availability').trigger('click');
        });
        switch (range) {
          case 'none':
            $('#anytimeFrom').trigger('click');
            $('#anytimeTo').trigger('click');
            break;
          case 'to':
            $('#anytimeFrom').trigger('click');
            $('#specifyTo').trigger('click');
            break;
          case 'from':
            $('#specifyFrom').trigger('click');
            $('#anytimeTo').trigger('click');
            break;
          case 'toFrom':
            $('#specifyFrom').trigger('click');
            $('#specifyTo').trigger('click');
        }
        $('.time').keypress(function(e) {
          if (!Materia.Validate.Textfield.timeOnly(e)) {
            return e.preventDefault();
          }
        });
        $(window).keyup(function(e) {
          if (e.keyCode === 27) {
            $(window).unbind('keyup');
            return $.jqmodal('close');
          }
        });
        $('.attemptHolder li').click(function() {
          var clickedAmount;
          clickedAmount = $(this).attr('id').split('_')[1] * 1000;
          $('.selector').slider('value', clickedAmount);
          _checkAttempts(clickedAmount);
          return _setSlider();
        });
        return $('.save').click(function(e) {
          e.preventDefault();
          if (_parseSubmittedInfo()) {
            _changeAvailability(function() {
              return $.jqmodal('close');
            });
          }
          return false;
        });
      });
    };
    return {
      init: init,
      popup: popup
    };
  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  Namespace('Materia').TextFilter = (function() {
    var MAX_ANIMATED_ITEMS, clearHighlights, clearSearch, highlight, lastSearch, renderSearch, search, searchDelay, searchDelayTimeoutId, setupInput, simplifyIndicies, zebraStripe;
    MAX_ANIMATED_ITEMS = 100;
    searchDelay = null;
    searchDelayTimeoutId = null;
    lastSearch = '';
    clearHighlights = function($targetElements) {
      return $targetElements.find('.highlighted').replaceWith(function() {
        return this.innerHTML;
      });
    };
    highlight = function(searchString, selector) {
      var found, multipleTerms, terms;
      if (searchString === '') {
        return true;
      }
      found = false;
      terms = searchString.split(' ');
      multipleTerms = terms.length > 1;
      $(selector).find(".searchable").each(function() {
        var $this, allTermsMatch, html, i, index, indicies, len, lowercaseHtml, newHtml, term, _i, _j, _len, _ref;
        $this = $(this);
        html = $this.html();
        lowercaseHtml = html.toLowerCase();
        if (!multipleTerms) {
          index = lowercaseHtml.indexOf(terms[0]);
          if (index > -1) {
            $this.html(html.substring(0, index) + ("<span class='highlighted'>" + (html.substring(index, index + terms[0].length)) + "</span>" + (html.substring(index + terms[0].length))));
            return found = true;
          }
        } else {
          indicies = [];
          allTermsMatch = true;
          for (_i = 0, _len = terms.length; _i < _len; _i++) {
            term = terms[_i];
            index = lowercaseHtml.indexOf(term);
            if (index > -1) {
              indicies.push([index, index + term.length]);
            } else {
              break;
            }
          }
          if (indicies.length > 0 && allTermsMatch) {
            indicies = simplifyIndicies(indicies);
            len = indicies.length;
            newHtml = '';
            for (i = _j = 0, _ref = len - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
              newHtml += html.substring((i === 0 ? 0 : indicies[i - 1][1]), indicies[i][0]);
              newHtml += "<span class='highlighted'>" + (html.substring(indicies[i][0], indicies[i][1])) + "</span>";
              if (i === len - 1) {
                newHtml += html.substring(indicies[i][1]);
              }
            }
            $this.html(newHtml);
            return found = true;
          }
        }
      });
      return found;
    };
    simplifyIndicies = function(indicies) {
      var end, i, index, newIndicies, openIndex, pair, stackNumber, start, val, _i, _j, _len, _len1;
      pair = [];
      newIndicies = [];
      stackNumber = 0;
      openIndex = 0;
      for (_i = 0, _len = indicies.length; _i < _len; _i++) {
        index = indicies[_i];
        start = index[0];
        end = index[1];
        if (typeof pair[start] === "function" ? pair[start](pair[start]++) : void 0) {

        } else {
          pair[start] = 1;
        }
        if (pair[end] != null) {
          pair[end]--;
        } else {
          pair[end] = -1;
        }
      }
      for (i = _j = 0, _len1 = pair.length; _j < _len1; i = ++_j) {
        val = pair[i];
        if (val != null) {
          if (stackNumber === 0) {
            openIndex = i;
          }
          stackNumber += val;
          if (stackNumber === 0) {
            newIndicies.push([openIndex, i]);
          }
        }
      }
      newIndicies.sort(function(a, b) {
        if (a[0] < b[0]) {
          return -1;
        }
        if (a[0] > b[0]) {
          return 1;
        }
        return 0;
      });
      return newIndicies;
    };
    search = function(searchValue, whatToSearch, animationType) {
      var $whatToSearch, hits, misses;
      searchValue = $.trim(searchValue.toLowerCase().replace(/,/g, ' '));
      hits = [];
      misses = [];
      $whatToSearch = $(whatToSearch);
      clearHighlights($whatToSearch);
      $whatToSearch.each(function() {
        if (highlight(searchValue, $(this))) {
          return hits.push(this);
        } else {
          return misses.push(this);
        }
      });
      renderSearch($(hits), $(misses), animationType);
      return hits;
    };
    clearSearch = function(whatToSearch, animationType) {
      return search('', whatToSearch, animationType);
    };
    renderSearch = function($hits, $misses, animationType) {
      if (animationType == null) {
        animationType = 'hide';
      }
      if ($hits.length + $misses.length > MAX_ANIMATED_ITEMS) {
        animationType = 'quick';
      }
      switch (animationType) {
        case 'fade':
          $hits.fadeTo(200, (function() {
            return zebraStripe();
          }), 1);
          return $misses.fadeTo(200, (function() {
            return zebraStripe();
          }), 0.2);
        case 'slide':
          $hits.slideDown('fast', function() {
            return zebraStripe();
          });
          return $misses.slideUp('fast', function() {
            return zebraStripe();
          });
        case 'quick':
          $hits.css('display', 'block');
          $misses.css('display', 'none');
          return zebraStripe();
        case 'nozebra':
          $hits.slideDown('fast');
          return $misses.slideUp('fast');
        case 'hide':
          break;
        default:
          $hits.show();
          $misses.hide();
          return zebraStripe();
      }
    };
    zebraStripe = function() {
      var odd;
      odd = false;
      return $('.widget_list').children(':visible').removeClass('odd').each(function() {
        var $this;
        $this = $(this);
        if ($(this).get(0).nodeName !== 'H2') {
          odd = !odd;
          if (odd) {
            return $this.addClass('odd');
          }
        }
      });
    };
    setupInput = function(input, callback, _searchDelay) {
      var $closeX, $element;
      $element = $(input);
      if (callback == null) {
        callback = $.noop;
      }
      if (_searchDelay == null) {
        searchDelay = 0;
      } else {
        searchDelay = _searchDelay;
      }
      $closeX = $('.search-close');
      $closeX.hide();
      $closeX.click(function(event) {
        $element.val('').trigger('keyup');
        return $(this).hide();
      });
      return $element.keyup(function(event) {
        var val;
        val = $element.val();
        if (val !== lastSearch) {
          clearTimeout(searchDelayTimeoutId);
          if (searchDelay === 0 || val.length === 0) {
            callback(val);
          } else {
            searchDelayTimeoutId = setTimeout(function() {
              return callback(val);
            }, searchDelay);
          }
        } else if (event.keyCode === 27) {
          val = '';
          $element.val(val).trigger('keyup');
        }
        if (val.length !== 0) {
          $closeX.show();
        } else {
          $closeX.hide();
        }
        return lastSearch = val;
      });
    };
    return {
      highlight: highlight,
      clearHighlights: clearHighlights,
      search: search,
      clearSearch: clearSearch,
      renderSearch: renderSearch,
      setupInput: setupInput,
      zebraStripe: zebraStripe
    };
  })();

}).call(this);

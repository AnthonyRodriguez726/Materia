// Generated by CoffeeScript 1.6.3
(function() {
  Namespace('Materia').Scores = (function() {
    var addCircleToDetailTable, attempt_dates, attempts, barPlot, currentAttempt, details, displayAttempts, displayDetails, displayScoreData, displayWidgetInstance, getAttemptNumberFromHash, getInstanceScores, getScoreDetails, getWidgetInstance, init, isEmbedded, isPreview, sendPostMessage, templates, toggleClassRankGraph, updateHtmlTemplate, widgetInstance, _graphData, _inst_id, _setupEvents;
    attempts = null;
    attempt_dates = null;
    details = null;
    currentAttempt = null;
    templates = {};
    widgetInstance = null;
    isPreview = false;
    isEmbedded = false;
    barPlot = null;
    _graphData = [];
    _inst_id = null;
    _setupEvents = false;
    init = function(gateway) {
      var play_id, widget_id;
      isPreview = /\/preview\//i.test(document.URL);
      isEmbedded = window.location.href.toLowerCase().indexOf('/scores/embed/') !== -1;
      play_id = window.location.hash.split('play-')[1];
      widget_id = document.URL.match(/^[\.\w\/:]+\/([a-z0-9]+)/i)[1];
      attempts = [];
      attempt_dates = [];
      details = [];
      Materia.Scores.displayScoreData(widget_id, play_id);
      $(window).bind('hashchange', getScoreDetails);
      templates.overview = $('.overview').clone();
      templates.details = $('.details').clone();
      templates.title = $('article.container header > h1').clone();
      if (!isPreview && !isEmbedded) {
        $('#class-rank-button').show();
        return $('#class-rank-button').on('click', toggleClassRankGraph);
      }
    };
    displayScoreData = function(inst_id, play_id) {
      return $.when(getWidgetInstance(inst_id), getInstanceScores(inst_id)).done(function() {
        displayAttempts(play_id);
        return displayWidgetInstance();
      }).fail(function() {});
    };
    getWidgetInstance = function(inst_id) {
      var dfd;
      _inst_id = inst_id;
      dfd = $.Deferred();
      Materia.Coms.Json.send('widget_instances_get', [[inst_id]], function(widgetInstances) {
        if (widgetInstances.length < 1) {
          dfd.reject('Unable to retrieve widget info');
        }
        widgetInstance = widgetInstances[0];
        return dfd.resolve();
      });
      return dfd.promise();
    };
    getInstanceScores = function(inst_id) {
      var dfd;
      dfd = $.Deferred();
      if (isPreview) {
        attempts = [
          {
            'id': -1,
            'created_at': 0,
            'percent': 0
          }
        ];
        dfd.resolve();
      } else {
        Materia.Coms.Json.send('widget_instance_scores_get', [inst_id], function(scores) {
          var $error, attemptScore, _i, _len;
          if (scores === null || scores.length < 1) {
            $('article.container').remove();
            $error = $($('#t-restricted').html());
            $error.find('.page').css('width', 'auto');
            $('body').append($error);
            $error.show();
            dfd.reject('No scores for this widget');
          }
          for (_i = 0, _len = scores.length; _i < _len; _i++) {
            attemptScore = scores[_i];
            attemptScore.roundedPercent = String(parseFloat(attemptScore.percent).toFixed(2));
          }
          attempts = scores;
          return dfd.resolve();
        });
      }
      return dfd.promise();
    };
    getScoreDetails = function() {
      var hash, play_id, prefix, _name;
      if (isPreview) {
        currentAttempt = 1;
        return Materia.Coms.Json.send('widget_instance_play_scores_get', [null, widgetInstance.id], displayDetails);
      } else {
        hash = getAttemptNumberFromHash();
        if (currentAttempt === hash) {
          return;
        }
        currentAttempt = hash;
        play_id = attempts[attempts.length - currentAttempt]['id'];
        if (isEmbedded === true) {
          prefix = '/scores/';
          $('#visit-materia').attr('href', prefix + widgetInstance.id + '#attempt-' + currentAttempt);
        }
        if (typeof details[_name = attempts.length - currentAttempt] === "function" ? details[_name](displayDetails(details[attempts.length - currentAttempt])) : void 0) {

        } else {
          return Materia.Coms.Json.send('widget_instance_play_scores_get', [play_id], displayDetails);
        }
      }
    };
    displayWidgetInstance = function() {
      var hidePlayAgain, lengthRange, overview_data, paddingSize, prefix, textSize;
      hidePlayAgain = false;
      overview_data = {
        title: widgetInstance.name,
        attempts: attempts,
        dates: attempt_dates
      };
      if (widgetInstance.attempts <= 0 || (widgetInstance.attempts > 0 && attempts.length < widgetInstance.attempts) || isPreview) {
        prefix = isEmbedded ? '/embed/' : (isPreview ? '/preview/' : '/play/');
        overview_data.href = prefix + widgetInstance.id + '/' + widgetInstance.clean_name;
        if (typeof __LTI_TOKEN !== "undefined" && __LTI_TOKEN !== null) {
          overview_data.href += '?ltitoken=' + __LTI_TOKEN;
        }
        overview_data.play_again = isPreview ? 'Preview Again' : 'Play Again';
      } else {
        hidePlayAgain = true;
      }
      updateHtmlTemplate(overview_data, 'header');
      lengthRange = Math.floor(widgetInstance.name.length / 10);
      textSize = parseInt($('article.container header > h1').css('font-size'));
      paddingSize = parseInt($('article.container header > h1').css('padding-top'));
      switch (lengthRange) {
        case 0:
        case 1:
        case 2:
          textSize -= 4;
          paddingSize += 4;
          break;
        case 3:
          textSize -= 8;
          paddingSize += 8;
          break;
        default:
          textSize -= 12;
          paddingSize += 12;
      }
      $('article.container header > h1').css({
        'font-size': textSize,
        'padding-top': paddingSize
      });
      if (hidePlayAgain) {
        return $('#play-again').hide();
      }
    };
    displayAttempts = function(play_id) {
      var d, i, matchedAttempt, _i, _ref;
      if (isPreview) {
        $('header').addClass('preview');
        currentAttempt = 1;
        return getScoreDetails();
      } else {
        if (attempts instanceof Array && attempts.length > 0) {
          matchedAttempt = false;
          for (i = _i = 0, _ref = attempts.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            d = new Date(attempts[i].created_at * 1000);
            attempt_dates[i] = (d.getMonth() + 1) + '/' + d.getDate() + '/' + d.getFullYear();
            if (play_id === attempts[i].id) {
              matchedAttempt = attempts.length - i;
            }
          }
          if (isPreview) {
            return window.location.hash = '#attempt-' + 1;
          } else if (matchedAttempt !== false) {
            window.location.hash = '#attempt-' + matchedAttempt;
            return getScoreDetails();
          } else if (getAttemptNumberFromHash() === void 0) {
            return window.location.hash = '#attempt-' + attempts.length;
          } else {
            return getScoreDetails();
          }
        }
      }
    };
    toggleClassRankGraph = function() {
      var text;
      text = $('#class-rank-button').html();
      $('#class-rank-button').html(text === 'Close Graph' ? "Compare With Class" : 'Close Graph');
      $('section.score-graph').slideToggle();
      if (_graphData.length > 0) {
        return;
      }
      if (isPreview) {
        return;
      }
      return Materia.Coms.Json.send('score_summary_get', [widgetInstance.id], function(data) {
        var bracket, d, jqOptions, n, _i, _j, _len, _len1;
        _graphData = [['0-9%', 0], ['10-19%', 0], ['20-29%', 0], ['30-39%', 0], ['40-49%', 0], ['50-59%', 0], ['60-69%', 0], ['70-79%', 0], ['80-89%', 0], ['90-100%', 0]];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          d = data[_i];
          for (n = _j = 0, _len1 = _graphData.length; _j < _len1; n = ++_j) {
            bracket = _graphData[n];
            bracket[1] += d.distribution[n];
          }
        }
        jqOptions = {
          animate: true,
          animateReplot: true,
          series: [
            {
              renderer: $.jqplot.BarRenderer,
              shadow: false,
              color: '#1e91e1',
              rendererOptions: {
                animation: {
                  speed: 500
                }
              }
            }
          ],
          seriesDefaults: {
            showMarker: false,
            pointLabels: {
              show: true,
              formatString: '%.0f',
              color: '#000'
            }
          },
          title: {
            text: "Compare Your Score With Everyone Else's",
            fontFamily: 'Lato, Lucida Grande, Arial, sans'
          },
          axesDefaults: {
            tickRenderer: $.jqplot.CanvasAxisTickRenderer,
            tickOptions: {
              angle: 0,
              fontSize: '8pt',
              color: '#000'
            }
          },
          axes: {
            xaxis: {
              renderer: $.jqplot.CategoryAxisRenderer,
              label: 'Score Percent'
            },
            yaxis: {
              tickOptions: {
                formatString: '%.1f',
                angle: 45
              },
              label: 'Number of Scores',
              labelRenderer: $.jqplot.CanvasAxisLabelRenderer,
              color: '#000'
            }
          },
          cursor: {
            show: false
          },
          grid: {
            shadow: false
          }
        };
        return barPlot = $.jqplot('graph', [_graphData], jqOptions);
      });
    };
    displayDetails = function(results) {
      var $error, $previousAttempts, deets, score, tableItem, widget_data, _i, _j, _len, _len1, _ref, _ref1;
      if (!results) {
        $('article.container').remove();
        widget_data = {
          href: "/preview/" + widgetInstance.id + "/" + widgetInstance.clean_name
        };
        updateHtmlTemplate(widget_data, 'expired');
        $error = $('#t-expired');
        $error.find('.page').css('width', 'auto');
        $error.show();
        return;
      } else {
        $('div.expired').remove();
      }
      details[attempts.length - currentAttempt] = results;
      deets = results[0];
      deets.overview.score = Math.round(deets.overview.score);
      _ref = deets.overview.table;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tableItem = _ref[_i];
        if (tableItem.value.constructor === String) {
          tableItem.value = parseFloat(tableItem.value);
        }
        tableItem.value = tableItem.value.toFixed(2);
      }
      _ref1 = deets.details[0].table;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        tableItem = _ref1[_j];
        score = parseFloat(tableItem.score);
        if (score !== 0 && score !== 100) {
          tableItem.score = score.toFixed(2);
        }
      }
      updateHtmlTemplate(deets.overview, 'overview');
      if (!isEmbedded) {
        updateHtmlTemplate(deets.details, 'details');
        addCircleToDetailTable(deets.details);
      }
      if (isPreview) {
        $('.overview hgroup h1').css('margin-top', 10);
        $('.previous-attempts').hide();
      }
      $('.container').fadeIn(function() {
        if (isPreview) {
          return $('#class-rank-button').remove();
        } else {
          return $('#class-rank-button').css('display', 'inline-block').on('click', toggleClassRankGraph);
        }
      });
      $('ul li.single_column').each(function(index) {
        var fixed_list_height;
        fixed_list_height = $(this).children(':first').height();
        $(this).height(fixed_list_height + 40);
        return $('ul li.single_column').children().each(function(child_index) {
          if ($(this).index() !== 0) {
            return $(this).height(fixed_list_height);
          }
        });
      });
      if (!_setupEvents) {
        _setupEvents = true;
        $previousAttempts = $('.previous-attempts');
        if (isMobile.any()) {
          $('.previous-attempts h1').on('click', function() {
            return $previousAttempts.toggleClass('open');
          });
          $('.previous-attempts a').on('click', function() {
            return $previousAttempts.removeClass('open');
          });
        } else {
          $previousAttempts.on('mouseover', function() {
            return $previousAttempts.addClass('open');
          });
          $previousAttempts.on('mouseout', function() {
            return $previousAttempts.removeClass('open');
          });
        }
      }
      return sendPostMessage(deets.overview.score);
    };
    updateHtmlTemplate = function(data, template_name) {
      var compiled, markup;
      data.attempt_num = currentAttempt;
      markup = $('#score_' + template_name + '_template').html();
      if (markup != null) {
        compiled = _.template(markup, data, {
          'variable': 'data'
        });
        return $('.' + template_name).html(compiled);
      }
    };
    addCircleToDetailTable = function(detail) {
      var canvas_id, greyMode, i, index, j, percent, table, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = detail.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (detail[i] != null) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (j = _j = 0, _ref1 = detail[i].table.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              table = detail[i].table;
              greyMode = false;
              index = j + 1;
              canvas_id = 'question-' + (i + 1) + '-' + index;
              percent = table[j].score / 100;
              switch (table[j].graphic) {
                case 'modifier':
                  greyMode = table[j].score === 0;
                  _results1.push(Materia.Scores.Scoregraphics.drawModifierCircle(canvas_id, index, percent, greyMode));
                  break;
                case 'final':
                  _results1.push(Materia.Scores.Scoregraphics.drawFinalScoreCircle(canvas_id, index, percent));
                  break;
                case 'score':
                  greyMode = table[j].score === -1;
                  _results1.push(Materia.Scores.Scoregraphics.drawScoreCircle(canvas_id, index, percent, greyMode));
                  break;
                default:
                  _results1.push(void 0);
              }
            }
            return _results1;
          })());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    sendPostMessage = function(score) {
      if (parent.postMessage && JSON.stringify) {
        return parent.postMessage(JSON.stringify({
          type: 'materiaScoreRecorded',
          widget: widgetInstance,
          score: score
        }), '*');
      }
    };
    getAttemptNumberFromHash = function() {
      var hashStr;
      hashStr = window.location.hash.split('-')[1];
      if (hashStr == null) {
        return attempts.length;
      } else {
        return hashStr;
      }
    };
    $(document).ready(function() {
      return Materia.Scores.init(API_LINK);
    });
    return {
      init: init,
      displayScoreData: displayScoreData
    };
  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  Namespace('Materia.Permissions').User = (function() {
    var ACCESS_VALUE_FULL, ACCESS_VALUE_VIEW_SCORES, DEMOTE_SELF_MSG, EXPIRE_SELF_MSG, REMOVE_SELF_MSG, SUPER_USER, createCollaboratorRow, disableRow, getDateForBeginningOfTomorrow, getExpirationDateString, init, modifyCollaboratorPermissions, modifyExpiration, removeCollaborator, repositionSearchWindow, search, searchMatchClick, showSelfDemotionWarning, stopSpin, updateAccessValueUI, updateExpirationLinkUI, updatePerms;
    REMOVE_SELF_MSG = "Are you sure you want to remove <strong>your</strong> access?";
    DEMOTE_SELF_MSG = "Are you sure you want to limit <strong>your</strong> access?";
    EXPIRE_SELF_MSG = "Are you sure you want to expire <strong>your</strong> access?";
    ACCESS_VALUE_FULL = 30;
    SUPER_USER = 90;
    ACCESS_VALUE_VIEW_SCORES = 0;
    init = function(gateway) {};
    showSelfDemotionWarning = function($parent, message, callback) {
      var $confirm, $pointingTo, p;
      $confirm = $('<div class="demote_dialogue"><div class="arrow"></div><span class="warning">' + message + '</span><a class="button no_button" href="#">No</a><a class="button action_button red yes_button" href="#">Yes</a></div>');
      $pointingTo = $parent.find('img');
      p = $pointingTo.offset();
      $parent.append($confirm);
      p.left += $pointingTo.outerWidth() + 11;
      p.top += ($pointingTo.outerHeight() - $confirm.outerHeight()) / 2;
      $confirm.css('z-index', '10000').css('position', 'absolute').offset(p);
      $confirm.find('.button').click(function(event) {
        event.preventDefault();
        return $('.demote_dialogue').remove();
      });
      $confirm.find('.no_button').click(function(event) {
        event.preventDefault();
        return callback(false);
      });
      return $confirm.find('.action_button').click(function(event) {
        event.preventDefault();
        return callback(true);
      });
    };
    getDateForBeginningOfTomorrow = function() {
      var d;
      d = new Date();
      d.setDate(d.getDate() + 1);
      return new Date(d.getFullYear(), d.getMonth(), d.getDate());
    };
    getExpirationDateString = function(timestamp) {
      timestamp = parseInt(timestamp, 10);
      if (isNaN(timestamp) || timestamp === 0) {
        return 'Never';
      } else {
        return $.datepicker.formatDate('mm/dd/yy', new Date(timestamp * 1000));
      }
    };
    createCollaboratorRow = function(collaborator, newAccess, currentAccess, expire) {
      var $expirationButton, $row, defaultAvatarLocation, initialExpirationTimestamp;
      defaultAvatarLocation = "?d=" + BASE_URL + "assets/img/default-avatar.jpg";
      $row = $('#permdump').clone();
      initialExpirationTimestamp = expire;
      $expirationButton = $row.find(".exp-date");
      $row.data('expirationDate', expire).data('user-id', collaborator.id).data('current-user', collaborator.isCurrentUser).data('access', newAccess);
      $row.attr('id', 'user-' + collaborator.id);
      $row.find('.avatar').attr('src', 'https://secure.gravatar.com/avatar/' + hex_md5(collaborator.email) + defaultAvatarLocation);
      $row.find('.name').html(collaborator.first + ' ' + collaborator.last + (collaborator.isCurrentUser ? '<span>(You)</span>' : ''));
      $row.find('.remove').on('click', function(event) {
        event.preventDefault();
        return removeCollaborator(collaborator, $row);
      });
      $row.find('.perm').on('change', function(event) {
        var newAccessValue;
        newAccessValue = parseInt($(this).val(), 10);
        event.preventDefault();
        return modifyCollaboratorPermissions(collaborator, newAccessValue, $row);
      });
      updateAccessValueUI($row, newAccess);
      $expirationButton.datepicker({
        minDate: getDateForBeginningOfTomorrow(),
        onSelect: function(dateText, inst) {
          return modifyExpiration(collaborator, $(this).datepicker('getDate').getTime() / 1000, $row);
        }
      });
      updateExpirationLinkUI($row, expire);
      $expirationButton.focusout(function(event) {
        var isValidDate;
        isValidDate = function(date) {
          var exception, isDate, parsed_date;
          if (date.length <= 0) {
            return false;
          }
          isDate = false;
          try {
            parsed_date = $.datepicker.parseDate('mm/dd/yy', date);
            isDate = Date.now() < parsed_date;
          } catch (_error) {
            exception = _error;
          }
          return isDate;
        };
        if ($(this).val() !== "Never" && !isValidDate($(this).val())) {
          alert('Please enter a valid date.');
          $(this).val('Never');
          return event.preventDefault();
        }
      });
      $row.find('.remove-expiration').on('click', function(event) {
        event.preventDefault();
        return modifyExpiration(collaborator, null, $row);
      });
      if (currentAccess !== ACCESS_VALUE_FULL && currentAccess !== SUPER_USER) {
        disableRow(collaborator, $row);
      }
      return $('#popup').find('.access_list').append($row);
    };
    disableRow = function(collaborator, $row) {
      $row.find('select').prop('disabled', true);
      $row.find('.exp-date').addClass('disabled').datepicker('destroy');
      $row.find('.remove-expiration').hide();
      if (!collaborator.isCurrentUser) {
        return $row.find('.remove').css('visibility', 'hidden');
      }
    };
    updateExpirationLinkUI = function($row, expiration_date) {
      $row.find(".exp-date").val(getExpirationDateString(expiration_date));
      if (expiration_date != null) {
        return $row.find('.remove-expiration').show();
      } else {
        return $row.find('.remove-expiration').hide();
      }
    };
    removeCollaborator = function(collaborator, $row) {
      var removalFunction;
      removalFunction = function(confirmed) {
        var index;
        if (confirmed) {
          index = $.inArray(collaborator.id, $("#popup.share").data("usersToAdd"));
          if (index === -1) {
            $("#popup.share").data("usersToRemove").push(collaborator.id);
          } else {
            $("#popup.share").data("usersToAdd").splice(index, 1);
          }
          return $row.fadeOut('fast', function() {
            return $(this).remove();
          });
        }
      };
      if (!collaborator.isCurrentUser) {
        return removalFunction(true);
      } else {
        if ($row.find('.demote_dialogue').length === 0) {
          return showSelfDemotionWarning($row, REMOVE_SELF_MSG, removalFunction);
        }
      }
    };
    modifyCollaboratorPermissions = function(collaborator, newAccessValue, $row) {
      var modifyFunction;
      modifyFunction = function(accessValue) {
        $row.data('access', accessValue);
        return updateAccessValueUI($row, accessValue);
      };
      if (!(collaborator.isCurrentUser && newAccessValue === ACCESS_VALUE_VIEW_SCORES)) {
        return modifyFunction(newAccessValue);
      } else {
        return showSelfDemotionWarning($row, DEMOTE_SELF_MSG, function(confirmed) {
          return modifyFunction(confirmed != null ? confirmed : {
            newAccessValue: ACCESS_VALUE_FULL
          });
        });
      }
    };
    updateAccessValueUI = function($row, accessValue) {
      accessValue = parseInt(accessValue, 10);
      return $row.find('select option[value="' + accessValue + '"]').attr('selected', 'selected');
    };
    modifyExpiration = function(collaborator, newExpirationTimestamp, $row) {
      var modifyFunction;
      modifyFunction = function(expirationTimestamp) {
        $row.data('expirationDate', expirationTimestamp);
        return updateExpirationLinkUI($row, expirationTimestamp);
      };
      if (!(collaborator.isCurrentUser && newExpirationTimestamp !== null && ($row.data('expirationDate') === null || !$row.data('expirationDate')))) {
        return modifyFunction(newExpirationTimestamp);
      } else {
        return showSelfDemotionWarning($row, EXPIRE_SELF_MSG, function(confirmed) {
          return modifyFunction(confirmed != null ? confirmed : {
            newExpirationTimestamp: null
          });
        });
      }
    };
    search = function(nameOrFragment) {
      var inputArray;
      Materia.Set.Throbber.startSpin('.search_list', {
        withDelay: false,
        withBackground: false,
        absolute: false
      });
      inputArray = nameOrFragment.split(',');
      nameOrFragment = inputArray[inputArray.length - 1];
      if (nameOrFragment.length < 1) {
        stopSpin();
        return;
      }
      return Materia.Coms.Json.send('users_search', [nameOrFragment], function(matches) {
        var gravatar, match, matchesHolder, noMatchMsg, searchList, targetIndex, user, _i, _len;
        if (matches === null || typeof matches === 'undefined' || matches.length < 1) {
          noMatchMsg = "The person you're searching for may need to log in to create an account.";
          $('#popup .search_list').html("<p class='no_match_message'>No matches found.</p>");
          $('#popup .search_list .no_match_message').after("<p class='no_match_reason'>" + noMatchMsg + "</p>");
          stopSpin();
          return;
        }
        matchesHolder = $("<div></div>");
        for (_i = 0, _len = matches.length; _i < _len; _i++) {
          user = matches[_i];
          match = $('<div><img class="user_match_avatar" src=""></img><p class="user_match_name"></p></div>');
          $(match).attr('id', 'match_user_' + user.id);
          $(match).addClass('search_match');
          $(match).attr('tabindex', 0);
          gravatar = 'https://secure.gravatar.com/avatar/' + hex_md5(user.email) + '?d=' + BASE_URL + 'assets/img/default-avatar.jpg';
          $(match).find('.user_match_avatar').attr('src', gravatar);
          $(match).find('.user_match_email').attr('value', user.email);
          $(match).find('.user_match_name').html(user.first + " " + user.last);
          $.data(match[0], "info", {
            id: user.id,
            first: user.first,
            last: user.last,
            email: user.email
          });
          matchesHolder.append(match);
          if (matches.length === 1) {
            $(match).css('background-color', '#7fc9f3');
          }
        }
        $('#popup .search_list').empty();
        matchesHolder.children().each(function() {
          var $new_perm;
          $new_perm = this;
          return $('#popup .search_list').append($new_perm);
        });
        $("#popup").tablock("reset");
        $('.search_match').click(searchMatchClick);
        targetIndex = -1;
        searchList = $('#popup .search_list').children();
        $('#popup.share').keyup(function(e) {
          if (e.which >= 37 && e.which <= 40) {
            e.preventDefault();
            targetIndex = $.inArray(searchList[targetIndex], searchList);
            switch (e.which) {
              case 37:
                if (targetIndex > -1) {
                  targetIndex--;
                } else {
                  stopSpin();
                  return;
                }
                break;
              case 38:
                if (targetIndex < 2) {
                  $('#popup .user_add').focus();
                  targetIndex = -1;
                  stopSpin();
                  return;
                } else {
                  targetIndex -= 2;
                }
                break;
              case 39:
                if (targetIndex > -1) {
                  targetIndex++;
                } else {
                  stopSpin();
                  return;
                }
                break;
              case 40:
                if (targetIndex === -1) {
                  targetIndex = 0;
                } else {
                  targetIndex += 2;
                }
            }
            return $(searchList[targetIndex]).focus();
          } else if (e.which === 13) {
            if (searchList.length === 1) {
              return $(searchList[0]).click();
            } else if (searchList.length > 1) {
              return $(searchList[targetIndex]).click();
            }
          }
        });
        return stopSpin();
      });
    };
    stopSpin = function() {
      return Materia.Set.Throbber.stopSpin('.search_list');
    };
    searchMatchClick = function() {
      var clickedMatch, info, newDiv, popup_data, selectedUsers, user, _i, _len;
      clickedMatch = $(this)[0];
      info = $.data(clickedMatch, "info");
      selectedUsers = $('#popup #access .access_list .user_perm');
      popup_data = $('#popup.share').data();
      for (_i = 0, _len = selectedUsers.length; _i < _len; _i++) {
        user = selectedUsers[_i];
        if (user.id.split('-')[1] === info.id) {
          alert("This user already has access to this widget.");
          $('#popup .user_add').val("");
          $('#popup .search_list').empty().slideUp(50);
          return;
        }
      }
      newDiv = $('<input class="share_user_to_add" type="button" value="' + info.first + " " + info.last + '"/>');
      $(newDiv).click(function() {
        var lastHeight;
        lastHeight = $('#popup  #input_area').height();
        $(this).remove();
        if ($('#popup  #input_area').height() !== lastHeight) {
          return Permissions.User.repositionSearchWindow();
        }
      });
      popup_data.usersToAdd.push(info.id);
      $('.search_match').remove();
      $('.user_add').val("");
      $('#popup .search_list').hide();
      $('#popup .adding_shadow').hide();
      return Materia.Permissions.Widget.buildPermsList();
    };
    repositionSearchWindow = function() {
      var addPos, addPosHeight;
      addPos = $('#popup .user_add').offset();
      addPosHeight = $('#popup .user_add').height();
      return $('#popup .search_list').offset({
        left: addPos.left,
        top: addPos.top + addPosHeight
      });
    };
    updatePerms = function(permObj, onSuccessCallback) {
      var cleanID;
      cleanID = $('.gameSelected').attr('id').split("_")[1];
      $("#popup.share").addClass('loading');
      return Materia.Coms.Json.send('permissions_set', [0, cleanID, permObj], function(returnData) {
        if (typeof returnData.type !== 'undefined' && returnData.type === "warn") {
          alert(returnData.msg);
          return $("#popup.share").removeClass('loading');
        } else {
          $("#popup.share .cancel_button").click();
          if (onSuccessCallback !== void 0) {
            return onSuccessCallback();
          }
        }
      });
    };
    return {
      init: init,
      createCollaboratorRow: createCollaboratorRow,
      search: search,
      repositionSearchWindow: repositionSearchWindow,
      updatePerms: updatePerms
    };
  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  Namespace('Materia.Storage').Manager = (function() {
    var addTable, clean, getTable, insert, _tables;
    _tables = [];
    addTable = function() {
      var columns, i, id, newTable, table, _i, _j, _len, _ref;
      id = arguments[0];
      columns = [];
      for (i = _i = 1, _ref = arguments.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        columns.push(arguments[i]);
      }
      for (_j = 0, _len = _tables.length; _j < _len; _j++) {
        table = _tables[_j];
        if (table.getId() === clean(id)) {
          break;
        }
      }
      if (table == null) {
        newTable = Materia.Storage.Table();
        newTable.init(clean(id), columns);
        return _tables.push(newTable);
      } else {
        throw new Error("Table '${id}' already exists");
      }
    };
    insert = function() {
      var i, result, table, tableId, values, _i, _j, _len, _ref;
      tableId = arguments[0];
      values = [];
      for (i = _i = 1, _ref = arguments.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        values.push(arguments[i]);
      }
      for (_j = 0, _len = _tables.length; _j < _len; _j++) {
        table = _tables[_j];
        if (table.getId() === clean(tableId)) {
          break;
        }
      }
      if (table == null) {
        throw new Error("Data table '" + tableId + "'' does not exist.");
        return null;
      }
      result = table.insert(values);
      return Materia.Engine.sendStorage(result);
    };
    getTable = function(tableID) {
      var i, table, _i, _ref;
      for (i = _i = 1, _ref = _tables.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        table = _tables[i];
        if (table.getId() === StorageTable.clean(tableID)) {
          break;
        }
      }
      if (table == null) {
        throw new Error("Data table '" + tableID + "' does not exist.");
        return null;
      }
      return table;
    };
    clean = function(name) {
      var cleanName;
      cleanName = name.replace(/^([ ]+)/, '');
      cleanName = cleanName.replace(/\s+$/g, '');
      cleanName = cleanName.replace(/\s/g, '_');
      if (cleanName === 'userName' || cleanName === 'firstName' || cleanName === 'lastName' || cleanName === 'timestamp' || cleanName === 'playID') {
        throw new Error('Column name "' + name + '" is a protected keyword');
      }
      return cleanName;
    };
    return {
      addTable: addTable,
      clean: clean,
      insert: insert,
      getTable: getTable
    };
  })();

}).call(this);

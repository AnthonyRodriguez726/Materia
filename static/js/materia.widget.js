// Generated by CoffeeScript 1.6.3
(function() {
  Namespace('Materia').Widget = (function() {
    var addWidget, cache, getWidget, getWidgets, removeWidget, saveWidget, sortWidgets, widgetTemplate, _buildSidebar, _widgets;
    _widgets = [];
    widgetTemplate = null;
    cache = null;
    sortWidgets = function() {
      if (cache == null) {
        cache = _widgets.slice();
        cache.sort(function(a, b) {
          return b.created_at - a.created_at;
        });
      }
      return _buildSidebar(cache);
    };
    getWidgets = function(callback) {
      if (_widgets.length === 0) {
        Materia.WidgetInstance.clearAll();
        return Materia.WidgetInstance.getAll(function(widgets) {
          _widgets = widgets;
          return callback(_widgets);
        });
      } else {
        return callback(_widgets);
      }
    };
    _buildSidebar = function(cachedWidgets) {
      var $clone, $clonedListItem, cached, clonedHtml, clonedListItem, fixedHtml, i, myWidgets, rand, widgetList, _i, _len, _ref;
      myWidgets = [];
      if (!widgetTemplate) {
        widgetTemplate = $("div[data-template=widget-list]");
      }
      $clone = widgetTemplate.clone().removeClass('_template_evenOdd').removeClass('template').removeAttr('data-template').addClass('widget');
      clonedHtml = $clone.wrap('<div>').parent().html();
      widgetList = $('<div class="widget_list"></div>');
      for (i = _i = 0, _len = cachedWidgets.length; _i < _len; i = ++_i) {
        cached = cachedWidgets[i];
        fixedHtml = clonedHtml.replace('_template_title', cached.name).replace('_template_type', cached.widget.name).replace('_template_scores', cached.numPlays + ((_ref = cached.numPlays > 1) != null ? _ref : {
          's': ''
        }));
        $clonedListItem = $(fixedHtml).attr('id', 'widget_' + cached.id).attr('data-created', cached.dateCreate).addClass(i % 2 === 0 ? 'odd' : 'even');
        if (cached.is_draft === true) {
          $clonedListItem.addClass("is_draft");
          $clonedListItem.find('.score').html('Draft');
        }
        $clonedListItem.children('.icon').attr('src', Materia.Image.iconUrl(cached.widget.dir, 60));
        if ((typeof BEARD_MODE !== "undefined" && BEARD_MODE !== null) && BEARD_MODE === true) {
          rand = Math.floor((Math.random() * beards.length) + 1) - 1;
          $clonedListItem.children('div:first-child').addClass('small_' + beards[rand]);
        }
        clonedListItem = $clonedListItem.get(0);
        cached.element = clonedListItem;
        myWidgets.push(clonedListItem);
      }
      $(widgetList).append(myWidgets);
      return $('.courses').animate({
        opacity: 0.1
      }, 100, function() {
        var $courses, $currentWidget, parPos, selectedId;
        $('.courses').html(widgetList);
        selectedId = Materia.MyWidgets.SelectedWidget.getSelectedId();
        if (selectedId) {
          $currentWidget = $('#widget_' + selectedId);
          $currentWidget.addClass('gameSelected');
          $courses = $currentWidget.parent().parent().parent();
          parPos = $courses.offset();
          $('.courses').scrollTop(0);
        }
        return $('.courses').animate({
          opacity: 1
        }, 100, function() {
          var pos;
          if (Materia.MyWidgets.SelectedWidget.getSelectedId()) {
            pos = $('.gameSelected').position();
            return $('.courses').animate({
              scrollTop: pos.top - 200
            });
          }
        });
      });
    };
    getWidget = function(inst_id, callback) {
      return Materia.WidgetInstance.get(inst_id, callback);
    };
    saveWidget = function(_params, callback) {
      var params;
      params = {
        widget_id: null,
        qset: null,
        is_draft: null,
        inst_id: null,
        open_at: null,
        close_at: null,
        attempts: null
      };
      $.extend(params, _params);
      return Materia.Coms.Json.send('widget_instance_save', [params.widget_id, params.name, params.qset, params.is_draft, params.inst_id, params.open_at, params.close_at, params.attempts], function(widget) {
        if (widget != null) {
          Materia.WidgetInstance.updateWidget(widget);
          return callback(widget);
        }
      });
    };
    addWidget = function(inst_id) {
      return Materia.WidgetInstance.get(inst_id, function() {
        return Materia.WidgetInstance.get(null, function(widgets) {
          var element;
          _widgets = widgets;
          cache = null;
          element = $('.typeSelected');
          element.removeClass('typeSelected');
          Materia.MyWidgets.SelectedWidget.setSelected(inst_id);
          return sortWidgets();
        });
      });
    };
    removeWidget = function(inst_id) {
      var curWidge, i, newID, widgetList, widgetListLength, _i;
      widgetList = $('.widget_list').children();
      widgetListLength = widgetList.size();
      newID = null;
      if (widgetListLength > 1) {
        curWidge = $('.gameSelected');
        if (curWidge.is(":first-child")) {
          newID = curWidge.next().attr('id').split('_')[1];
        } else {
          newID = curWidge.prev().attr('id').split('_')[1];
        }
        curWidge.remove();
        $('.odd').removeClass('odd');
        $('.even').removeClass('even');
        for (i = _i = 0; 0 <= widgetListLength ? _i <= widgetListLength : _i >= widgetListLength; i = 0 <= widgetListLength ? ++_i : --_i) {
          $(widgetList[i]).addClass(i % 2 === 0 ? 'odd' : 'even');
        }
      } else {
        $('.gameSelected').remove();
      }
      if (newID != null) {
        return Materia.MyWidgets.SelectedWidget.setSelected(newID);
      } else {
        return Materia.MyWidgets.SelectedWidget.noWidgets();
      }
    };
    return {
      getWidgets: getWidgets,
      getWidget: getWidget,
      sortWidgets: sortWidgets,
      saveWidget: saveWidget,
      addWidget: addWidget,
      removeWidget: removeWidget
    };
  })();

}).call(this);

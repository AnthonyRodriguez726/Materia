// Generated by CoffeeScript 1.6.3
(function() {
  Namespace('Materia').Player = (function() {
    var addLog, end, init, onWidgetReady, sendPendingLogs, sendStorage, _alert, _convertedInstance, _embed, _embedDoneDfD, _embedFlash, _embedHTML, _embedTarget, _endLogsPending, _endLogsSent, _endState, _getQuestionSet, _getWidgetInstance, _heartbeatIntervalId, _inst_id, _instance, _isEmbedded, _isPreview, _logInterval, _noFlash, _onLoadFail, _pendingLogs, _play_id, _qset, _scoreScreenPending, _scoreScreenURL, _sendPendingPlayLogs, _sendPendingStorageLogs, _sendToWidget, _sendWidgetInit, _setHeight, _showNoFlashWarning, _showScoreScreen, _startHeartBeat, _startPlaySession, _startTime, _translateForApiVersion, _widget, _widgetType;
    _convertedInstance = null;
    _embedDoneDfD = null;
    _embedTarget = null;
    _inst_id = null;
    _instance = null;
    _isEmbedded = false;
    _isPreview = false;
    _logInterval = 10000;
    _noFlash = false;
    _pendingLogs = {
      play: [],
      storage: []
    };
    _play_id = null;
    _qset = null;
    _startTime = 0;
    _widget = null;
    _widgetType = null;
    _endState = null;
    _endLogsPending = false;
    _scoreScreenPending = false;
    _endLogsSent = false;
    _heartbeatIntervalId = -1;
    _scoreScreenURL = null;
    _startHeartBeat = function() {
      var dfd;
      dfd = $.Deferred().resolve();
      setInterval(function() {
        return Materia.Coms.Json.send('session_valid', [null, false], function(data) {
          if (data === false) {
            alert('You have been logged out due to inactivity.\n\nPlease login again.');
            return window.location.reload();
          }
        });
      }, 30000);
      return dfd.promise();
    };
    _sendWidgetInit = function() {
      var dfd;
      dfd = $.Deferred().resolve();
      _convertedInstance = _translateForApiVersion(_instance);
      _startTime = (new Date()).getTime();
      _sendToWidget('initWidget', [_qset, _convertedInstance]);
      if (!_isPreview) {
        _heartbeatIntervalId = setInterval(sendPendingLogs, _logInterval);
      }
      return dfd.promise();
    };
    _sendToWidget = function(type, args) {
      switch (_widgetType) {
        case '.swf':
          return _widget[type].apply(_widget, args);
        case '.html':
          return _widget.contentWindow.postMessage(JSON.stringify({
            type: type,
            data: args
          }), STATIC_URL);
      }
    };
    _onLoadFail = function(msg) {
      return alert("Failure: " + msg);
    };
    _embed = function() {
      var dfd, enginePath;
      dfd = $.Deferred();
      _widgetType = _instance.widget.player.slice(_instance.widget.player.lastIndexOf('.'));
      if (_instance.widget.player.substring(0, 4) === 'http') {
        enginePath = _instance.widget.player;
      } else {
        enginePath = WIDGET_URL + _instance.widget.dir + _instance.widget.player;
      }
      switch (_widgetType) {
        case '.swf':
          _embedFlash(enginePath, '10', dfd);
          break;
        case '.html':
          _embedHTML(enginePath, dfd);
      }
      return dfd.promise();
    };
    _embedFlash = function(enginePath, version, dfd) {
      var attributes, express, flashvars, height, params, width;
      window.__materia_sendStorage = sendStorage;
      window.__materia_onWidgetReady = onWidgetReady;
      window.__materia_sendPendingLogs = sendPendingLogs;
      window.__materia_end = end;
      window.__materia_addLog = addLog;
      params = {
        menu: 'false',
        allowFullScreen: 'true',
        AllowScriptAccess: 'always'
      };
      attributes = {
        id: _embedTarget
      };
      express = BASE_URL + 'assets/flash/expressInstall.swf';
      width = '100%';
      height = '100%';
      flashvars = {
        inst_id: _inst_id,
        GIID: _inst_id,
        URL_WEB: BASE_URL,
        URL_GET_ASSET: 'media/'
      };
      if (typeof ie8Browser !== "undefined" && ie8Browser !== null) {
        width = '99.7%';
        height = '99.7%';
      }
      _embedDoneDfD = dfd;
      return swfobject.embedSWF(enginePath, _embedTarget, width, height, String(version), express, flashvars, params, attributes);
    };
    _embedHTML = function(enginePath, dfd) {
      var $iframe, a, expectedOrigin, _onPostMessage;
      _embedDoneDfD = dfd;
      $iframe = $('<iframe src="' + enginePath + '" id="container" class="html"></iframe>');
      $('#container').replaceWith($iframe);
      a = document.createElement('a');
      a.href = STATIC_URL;
      expectedOrigin = a.href.substr(0, a.href.length - 1);
      _onPostMessage = function(e) {
        var msg;
        if (e.origin === expectedOrigin) {
          msg = JSON.parse(e.data);
          switch (msg.type) {
            case 'start':
              return onWidgetReady();
            case 'addLog':
              return addLog(msg.data);
            case 'end':
              return end(msg.data);
            case 'sendStorage':
              return sendStorage(msg.data);
            case 'sendPendingLogs':
              return sendPendingLogs();
            case 'alert':
              return _alert(msg.data);
            case 'setHeight':
              return _setHeight(msg.data[0]);
            case 'initialize':
              break;
            default:
              throw new Error("Unknown PostMessage recieved from player core: " + msg.type);
          }
        } else {
          throw new Error("Post message Origin does not match.  Expected: " + expectedOrigin + ", Actual: " + e.origin);
        }
      };
      if (typeof addEventListener !== "undefined" && addEventListener !== null) {
        return addEventListener('message', _onPostMessage, false);
      } else if (typeof attachEvent !== "undefined" && attachEvent !== null) {
        return attachEvent('onmessage', _onPostMessage);
      }
    };
    _getWidgetInstance = function() {
      var dfd;
      dfd = $.Deferred();
      if (_noFlash) {
        dfd.reject('Flash Player required.');
      }
      Materia.Coms.Json.send('widget_instances_get', [[_inst_id]], function(widgetInstances) {
        var type, version;
        if (widgetInstances.length < 1) {
          dfd.reject('Unable to get widget info.');
        }
        _instance = widgetInstances[0];
        type = _instance.widget.player.split('.').pop();
        version = parseInt(_instance.widget.flash_version, 10);
        if (type === 'swf' && swfobject.hasFlashPlayerVersion(String(version)) === false) {
          _showNoFlashWarning();
          dfd.reject('Newer Flash Player version required.');
        } else {
          if (_instance.widget.width > 0) {
            $('.center').width(_instance.widget.width);
          }
          if (_instance.widget.height > 0) {
            $('.center').height(_instance.widget.height);
          }
          dfd.resolve();
        }
        return $('.widget').show();
      });
      return dfd.promise();
    };
    _showNoFlashWarning = function() {
      _noFlash = true;
      $('body').addClass('no-flash');
      $('.widget').show();
      return $('#no_flash').show();
    };
    _startPlaySession = function() {
      var dfd;
      dfd = $.Deferred();
      switch (false) {
        case !_noFlash:
          dfd.reject('Flash Player Required.');
          break;
        case !_isPreview:
          dfd.resolve();
          break;
        default:
          _play_id = __PLAY_ID;
          if (_play_id != null) {
            dfd.resolve();
          } else {
            dfd.reject('Unable to start play session.');
          }
      }
      return dfd.promise();
    };
    _getQuestionSet = function() {
      var dfd;
      dfd = $.Deferred();
      Materia.Coms.Json.send('question_set_get', [_inst_id, _play_id], function(result) {
        _qset = result;
        return dfd.resolve();
      });
      return dfd.promise();
    };
    _sendPendingPlayLogs = function() {
      var args, dfd;
      dfd = $.Deferred();
      if (_pendingLogs.play.length > 0) {
        args = [_play_id, _pendingLogs.play];
        if (_isPreview) {
          args.push(_inst_id);
        }
        Materia.Coms.Json.send('play_logs_save', args, function(result) {
          if ((result != null) && (result.score_url != null)) {
            _scoreScreenURL = result.score_url;
          }
          return dfd.resolve();
        });
        _pendingLogs.play = [];
      } else {
        dfd.resolve();
      }
      return dfd.promise();
    };
    _sendPendingStorageLogs = function() {
      var dfd;
      dfd = $.Deferred();
      if (!_isPreview && _pendingLogs.storage.length > 0) {
        Materia.Coms.Json.send('play_storage_data_save', [_play_id, _pendingLogs.storage], function() {
          return dfd.resolve();
        });
        _pendingLogs.storage = [];
      } else {
        dfd.resolve();
      }
      return dfd.promise();
    };
    _translateForApiVersion = function(inst) {
      var output;
      switch (parseInt(inst.widget.api_version)) {
        case 1:
          output = {
            startDate: inst.open_at,
            playable: inst.widget.is_playable,
            embedUrl: inst.embed_url,
            engineName: inst.widget.name,
            endDate: inst.close_at,
            GRID: inst.widget.id,
            type: inst.widget.type,
            dateCreate: inst.created_at,
            version: '',
            playUrl: inst.play_url,
            QSET: inst.qset,
            isDraft: inst.is_draft,
            height: inst.widget.height,
            dir: inst.group,
            storesData: inst.widget.is_storage_enabled,
            name: inst.name,
            engineID: inst.widget.id,
            GIID: inst.id,
            flVersion: inst.flash_version,
            isQSetEncrypted: inst.widget.is_qset_encrypted,
            cleanName: inst.widget.clean_name,
            attemptsAllowed: inst.attempts,
            recordsScores: inst.widget.is_scorable,
            width: inst.widget.width,
            isAnswersEncrypted: inst.widget.is_answer_encrypted,
            cleanOwner: '',
            editable: inst.widget.is_editable,
            previewUrl: inst.preview_url,
            userID: inst.user_id,
            scoreModule: inst.widget.score_module
          };
          break;
        case 2:
          output = inst;
          break;
        default:
          output = inst;
      }
      return output;
    };
    _setHeight = function(h) {
      var min_h;
      if (window.top === window.self) {
        min_h = _instance.widget.height;
        if (h > min_h) {
          return $('#container').height(h);
        } else {
          return $('#container').height(min_h);
        }
      }
    };
    init = function(gateway, inst_id, embedTarget) {
      var checkForContext, word, _i, _len;
      _embedTarget = embedTarget;
      _inst_id = inst_id;
      checkForContext = String(window.location).split('/');
      for (_i = 0, _len = checkForContext.length; _i < _len; _i++) {
        word = checkForContext[_i];
        if (word === 'preview') {
          _isPreview = true;
          $('body').addClass('preview');
          $('.center').prepend($('<header>').addClass('preview-bar'));
          break;
        }
      }
      _isEmbedded = top.location !== self.location;
      return $.when(_getWidgetInstance(), _startPlaySession()).pipe(_getQuestionSet).pipe(_embed).pipe(_sendWidgetInit).pipe(_startHeartBeat).fail(_onLoadFail);
    };
    addLog = function(log) {
      log['game_time'] = ((new Date()).getTime() - _startTime) / 1000;
      return _pendingLogs.play.push(log);
    };
    sendStorage = function(log) {
      if (!_isPreview) {
        return _pendingLogs.storage.push(log);
      }
    };
    end = function(showScoreScreenAfter) {
      if (showScoreScreenAfter == null) {
        showScoreScreenAfter = true;
      }
      switch (_endState) {
        case 'sent':
          if (showScoreScreenAfter) {
            return _showScoreScreen();
          }
          break;
        case 'pending':
          if (showScoreScreenAfter) {
            return _scoreScreenPending = true;
          }
          break;
        default:
          _endState = 'pending';
          clearInterval(_heartbeatIntervalId);
          addLog({
            type: 2,
            item_id: 0,
            text: '',
            value: null
          });
          return sendPendingLogs(function() {
            _endState = 'sent';
            if (showScoreScreenAfter || _scoreScreenPending) {
              return _showScoreScreen();
            }
          });
      }
    };
    _showScoreScreen = function() {
      if (_scoreScreenURL === null) {
        if (_isPreview) {
          _scoreScreenURL = "" + BASE_URL + "scores/preview/" + _inst_id;
        } else if (_isEmbedded) {
          _scoreScreenURL = "" + BASE_URL + "scores/embed/" + _inst_id;
        } else {
          _scoreScreenURL = "" + BASE_URL + "scores/" + _inst_id;
        }
      }
      return window.location = _scoreScreenURL;
    };
    sendPendingLogs = function(callback) {
      if (callback == null) {
        callback = $.noop;
      }
      return $.when(_sendPendingStorageLogs()).pipe(_sendPendingPlayLogs).done(callback).fail(function() {
        return alert('There was a problem saving.');
      });
    };
    onWidgetReady = function() {
      _widget = $('#container').get(0);
      switch (false) {
        case !(_qset == null):
          return _embedDoneDfD.reject('Unable to load widget data.');
        case !(_widget == null):
          return _embedDoneDfD.reject('Unable to load widget.');
        default:
          return _embedDoneDfD.resolve();
      }
    };
    _alert = function(options) {
      var alertWindow, b, buttons, msg, title, type, _i, _len;
      title = options.title;
      msg = options.msg;
      type = options.type;
      alertWindow = $("<div>");
      alertWindow.append('<h1>' + title + '</h1>');
      alertWindow.append('<p>' + msg + '</p>');
      buttons = [];
      switch (type) {
        case 1:
          buttons = ['OK'];
          break;
        case 2:
          buttons = ['OK', 'Cancel'];
          break;
        case 3:
          buttons = ['Yes', 'No'];
      }
      for (_i = 0, _len = buttons.length; _i < _len; _i++) {
        b = buttons[_i];
        alertWindow.append('<button class="action_button">' + b + '</button>');
      }
      return $.jqmodal.standalone({
        modal: true,
        backgroundStyle: 'light',
        className: 'alert',
        html: alertWindow.html(),
        closingSelectors: ['button']
      });
    };
    return {
      init: init
    };
  })();

}).call(this);
